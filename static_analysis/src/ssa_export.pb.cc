// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssa_export.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ssa_export.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ssa {

namespace {

const ::google::protobuf::Descriptor* RegisterX64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterX64_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegisterTricore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterTricore_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitTricore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitTricore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
struct RegisterOneofInstance {
  const ::ssa::RegisterX64* register_x64_;
  const ::ssa::RegisterTricore* register_tricore_;
  const ::ssa::BitTricore* bit_tricore_;
}* Register_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ConstantX64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstantX64_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressX64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressX64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstantTricore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstantTricore_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddressTricore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressTricore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Constant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Constant_reflection_ = NULL;
struct ConstantOneofInstance {
  const ::ssa::ConstantX64* constant_x64_;
  const ::ssa::ConstantTricore* constant_tricore_;
  const ::ssa::AddressTricore* address_tricore_;
  const ::ssa::AddressX64* address_x64_;
}* Constant_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* MemoryX64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryX64_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryTricore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryTricore_reflection_ = NULL;
const ::google::protobuf::Descriptor* Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Memory_reflection_ = NULL;
struct MemoryOneofInstance {
  const ::ssa::MemoryX64* memory_x64_;
  const ::ssa::MemoryTricore* memory_tricore_;
}* Memory_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* CallingConvention_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallingConvention_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseInstruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseInstruction_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhiNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhiNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operand_reflection_ = NULL;
struct OperandOneofInstance {
  const ::ssa::Register* register__;
  const ::ssa::Constant* constant_;
  const ::ssa::Memory* memory_;
}* Operand_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Instruction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instruction_reflection_ = NULL;
struct InstructionOneofInstance {
  const ::ssa::CallingConvention* calling_convention_;
  const ::ssa::BaseInstruction* instruction_;
  const ::ssa::PhiNode* phi_node_;
}* Instruction_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* BasicBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BasicBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Function_reflection_ = NULL;
const ::google::protobuf::Descriptor* Functions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Functions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AccessType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ssa_5fexport_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ssa_5fexport_2eproto() {
  protobuf_AddDesc_ssa_5fexport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ssa_export.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterX64_descriptor_ = file->message_type(0);
  static const int RegisterX64_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterX64, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterX64, phi_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterX64, access_type_),
  };
  RegisterX64_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterX64_descriptor_,
      RegisterX64::default_instance_,
      RegisterX64_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterX64),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterX64, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterX64, _is_default_instance_));
  RegisterTricore_descriptor_ = file->message_type(1);
  static const int RegisterTricore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterTricore, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterTricore, phi_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterTricore, access_type_),
  };
  RegisterTricore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterTricore_descriptor_,
      RegisterTricore::default_instance_,
      RegisterTricore_offsets_,
      -1,
      -1,
      -1,
      sizeof(RegisterTricore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterTricore, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterTricore, _is_default_instance_));
  BitTricore_descriptor_ = file->message_type(2);
  static const int BitTricore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitTricore, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitTricore, phi_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitTricore, access_type_),
  };
  BitTricore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BitTricore_descriptor_,
      BitTricore::default_instance_,
      BitTricore_offsets_,
      -1,
      -1,
      -1,
      sizeof(BitTricore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitTricore, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitTricore, _is_default_instance_));
  Register_descriptor_ = file->message_type(3);
  static const int Register_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Register_default_oneof_instance_, register_x64_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Register_default_oneof_instance_, register_tricore_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Register_default_oneof_instance_, bit_tricore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, content_),
  };
  Register_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      -1,
      -1,
      -1,
      Register_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _oneof_case_[0]),
      sizeof(Register),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _is_default_instance_));
  ConstantX64_descriptor_ = file->message_type(4);
  static const int ConstantX64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantX64, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantX64, access_type_),
  };
  ConstantX64_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConstantX64_descriptor_,
      ConstantX64::default_instance_,
      ConstantX64_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConstantX64),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantX64, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantX64, _is_default_instance_));
  AddressX64_descriptor_ = file->message_type(5);
  static const int AddressX64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressX64, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressX64, access_type_),
  };
  AddressX64_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddressX64_descriptor_,
      AddressX64::default_instance_,
      AddressX64_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddressX64),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressX64, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressX64, _is_default_instance_));
  ConstantTricore_descriptor_ = file->message_type(6);
  static const int ConstantTricore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantTricore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantTricore, access_type_),
  };
  ConstantTricore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConstantTricore_descriptor_,
      ConstantTricore::default_instance_,
      ConstantTricore_offsets_,
      -1,
      -1,
      -1,
      sizeof(ConstantTricore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantTricore, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstantTricore, _is_default_instance_));
  AddressTricore_descriptor_ = file->message_type(7);
  static const int AddressTricore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressTricore, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressTricore, access_type_),
  };
  AddressTricore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddressTricore_descriptor_,
      AddressTricore::default_instance_,
      AddressTricore_offsets_,
      -1,
      -1,
      -1,
      sizeof(AddressTricore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressTricore, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressTricore, _is_default_instance_));
  Constant_descriptor_ = file->message_type(8);
  static const int Constant_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Constant_default_oneof_instance_, constant_x64_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Constant_default_oneof_instance_, constant_tricore_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Constant_default_oneof_instance_, address_tricore_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Constant_default_oneof_instance_, address_x64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, content_),
  };
  Constant_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Constant_descriptor_,
      Constant::default_instance_,
      Constant_offsets_,
      -1,
      -1,
      -1,
      Constant_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, _oneof_case_[0]),
      sizeof(Constant),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Constant, _is_default_instance_));
  MemoryX64_descriptor_ = file->message_type(9);
  static const int MemoryX64_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryX64, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryX64, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryX64, access_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryX64, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryX64, index_factor_),
  };
  MemoryX64_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemoryX64_descriptor_,
      MemoryX64::default_instance_,
      MemoryX64_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemoryX64),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryX64, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryX64, _is_default_instance_));
  MemoryTricore_descriptor_ = file->message_type(10);
  static const int MemoryTricore_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryTricore, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryTricore, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryTricore, access_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryTricore, pre_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryTricore, post_increment_),
  };
  MemoryTricore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MemoryTricore_descriptor_,
      MemoryTricore::default_instance_,
      MemoryTricore_offsets_,
      -1,
      -1,
      -1,
      sizeof(MemoryTricore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryTricore, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryTricore, _is_default_instance_));
  Memory_descriptor_ = file->message_type(11);
  static const int Memory_offsets_[3] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Memory_default_oneof_instance_, memory_x64_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Memory_default_oneof_instance_, memory_tricore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, content_),
  };
  Memory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Memory_descriptor_,
      Memory::default_instance_,
      Memory_offsets_,
      -1,
      -1,
      -1,
      Memory_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _oneof_case_[0]),
      sizeof(Memory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _is_default_instance_));
  CallingConvention_descriptor_ = file->message_type(12);
  static const int CallingConvention_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallingConvention, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallingConvention, mnemonic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallingConvention, operands_),
  };
  CallingConvention_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CallingConvention_descriptor_,
      CallingConvention::default_instance_,
      CallingConvention_offsets_,
      -1,
      -1,
      -1,
      sizeof(CallingConvention),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallingConvention, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallingConvention, _is_default_instance_));
  BaseInstruction_descriptor_ = file->message_type(13);
  static const int BaseInstruction_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInstruction, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInstruction, mnemonic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInstruction, operands_),
  };
  BaseInstruction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseInstruction_descriptor_,
      BaseInstruction::default_instance_,
      BaseInstruction_offsets_,
      -1,
      -1,
      -1,
      sizeof(BaseInstruction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInstruction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInstruction, _is_default_instance_));
  PhiNode_descriptor_ = file->message_type(14);
  static const int PhiNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhiNode, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhiNode, mnemonic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhiNode, operands_),
  };
  PhiNode_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PhiNode_descriptor_,
      PhiNode::default_instance_,
      PhiNode_offsets_,
      -1,
      -1,
      -1,
      sizeof(PhiNode),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhiNode, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhiNode, _is_default_instance_));
  Operand_descriptor_ = file->message_type(15);
  static const int Operand_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Operand_default_oneof_instance_, register__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Operand_default_oneof_instance_, constant_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Operand_default_oneof_instance_, memory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operand, content_),
  };
  Operand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Operand_descriptor_,
      Operand::default_instance_,
      Operand_offsets_,
      -1,
      -1,
      -1,
      Operand_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operand, _oneof_case_[0]),
      sizeof(Operand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operand, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operand, _is_default_instance_));
  Instruction_descriptor_ = file->message_type(16);
  static const int Instruction_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Instruction_default_oneof_instance_, calling_convention_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Instruction_default_oneof_instance_, instruction_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Instruction_default_oneof_instance_, phi_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, content_),
  };
  Instruction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Instruction_descriptor_,
      Instruction::default_instance_,
      Instruction_offsets_,
      -1,
      -1,
      -1,
      Instruction_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _oneof_case_[0]),
      sizeof(Instruction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instruction, _is_default_instance_));
  BasicBlock_descriptor_ = file->message_type(17);
  static const int BasicBlock_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, instructions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, predecessors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, successors_),
  };
  BasicBlock_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BasicBlock_descriptor_,
      BasicBlock::default_instance_,
      BasicBlock_offsets_,
      -1,
      -1,
      -1,
      sizeof(BasicBlock),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BasicBlock, _is_default_instance_));
  Function_descriptor_ = file->message_type(18);
  static const int Function_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, basic_blocks_),
  };
  Function_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Function_descriptor_,
      Function::default_instance_,
      Function_offsets_,
      -1,
      -1,
      -1,
      sizeof(Function),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _is_default_instance_));
  Functions_descriptor_ = file->message_type(19);
  static const int Functions_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functions, functions_),
  };
  Functions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Functions_descriptor_,
      Functions::default_instance_,
      Functions_offsets_,
      -1,
      -1,
      -1,
      sizeof(Functions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functions, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Functions, _is_default_instance_));
  AccessType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ssa_5fexport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterX64_descriptor_, &RegisterX64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterTricore_descriptor_, &RegisterTricore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BitTricore_descriptor_, &BitTricore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConstantX64_descriptor_, &ConstantX64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddressX64_descriptor_, &AddressX64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConstantTricore_descriptor_, &ConstantTricore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddressTricore_descriptor_, &AddressTricore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Constant_descriptor_, &Constant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemoryX64_descriptor_, &MemoryX64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MemoryTricore_descriptor_, &MemoryTricore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Memory_descriptor_, &Memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CallingConvention_descriptor_, &CallingConvention::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseInstruction_descriptor_, &BaseInstruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PhiNode_descriptor_, &PhiNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Operand_descriptor_, &Operand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Instruction_descriptor_, &Instruction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BasicBlock_descriptor_, &BasicBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Function_descriptor_, &Function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Functions_descriptor_, &Functions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ssa_5fexport_2eproto() {
  delete RegisterX64::default_instance_;
  delete RegisterX64_reflection_;
  delete RegisterTricore::default_instance_;
  delete RegisterTricore_reflection_;
  delete BitTricore::default_instance_;
  delete BitTricore_reflection_;
  delete Register::default_instance_;
  delete Register_default_oneof_instance_;
  delete Register_reflection_;
  delete ConstantX64::default_instance_;
  delete ConstantX64_reflection_;
  delete AddressX64::default_instance_;
  delete AddressX64_reflection_;
  delete ConstantTricore::default_instance_;
  delete ConstantTricore_reflection_;
  delete AddressTricore::default_instance_;
  delete AddressTricore_reflection_;
  delete Constant::default_instance_;
  delete Constant_default_oneof_instance_;
  delete Constant_reflection_;
  delete MemoryX64::default_instance_;
  delete MemoryX64_reflection_;
  delete MemoryTricore::default_instance_;
  delete MemoryTricore_reflection_;
  delete Memory::default_instance_;
  delete Memory_default_oneof_instance_;
  delete Memory_reflection_;
  delete CallingConvention::default_instance_;
  delete CallingConvention_reflection_;
  delete BaseInstruction::default_instance_;
  delete BaseInstruction_reflection_;
  delete PhiNode::default_instance_;
  delete PhiNode_reflection_;
  delete Operand::default_instance_;
  delete Operand_default_oneof_instance_;
  delete Operand_reflection_;
  delete Instruction::default_instance_;
  delete Instruction_default_oneof_instance_;
  delete Instruction_reflection_;
  delete BasicBlock::default_instance_;
  delete BasicBlock_reflection_;
  delete Function::default_instance_;
  delete Function_reflection_;
  delete Functions::default_instance_;
  delete Functions_reflection_;
}

void protobuf_AddDesc_ssa_5fexport_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ssa_5fexport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020ssa_export.proto\022\003ssa\"U\n\013RegisterX64\022\r"
    "\n\005index\030\001 \001(\007\022\021\n\tphi_index\030\002 \001(\017\022$\n\013acce"
    "ss_type\030\003 \001(\0162\017.ssa.AccessType\"Y\n\017Regist"
    "erTricore\022\r\n\005index\030\001 \001(\007\022\021\n\tphi_index\030\002 "
    "\001(\017\022$\n\013access_type\030\003 \001(\0162\017.ssa.AccessTyp"
    "e\"T\n\nBitTricore\022\r\n\005index\030\001 \001(\007\022\021\n\tphi_in"
    "dex\030\002 \001(\017\022$\n\013access_type\030\003 \001(\0162\017.ssa.Acc"
    "essType\"\231\001\n\010Register\022(\n\014register_x64\030\001 \001"
    "(\0132\020.ssa.RegisterX64H\000\0220\n\020register_trico"
    "re\030\002 \001(\0132\024.ssa.RegisterTricoreH\000\022&\n\013bit_"
    "tricore\030\003 \001(\0132\017.ssa.BitTricoreH\000B\t\n\007cont"
    "ent\"B\n\013ConstantX64\022\r\n\005value\030\001 \001(\020\022$\n\013acc"
    "ess_type\030\002 \001(\0162\017.ssa.AccessType\"A\n\nAddre"
    "ssX64\022\r\n\005value\030\001 \001(\006\022$\n\013access_type\030\002 \001("
    "\0162\017.ssa.AccessType\"F\n\017ConstantTricore\022\r\n"
    "\005value\030\001 \001(\017\022$\n\013access_type\030\002 \001(\0162\017.ssa."
    "AccessType\"E\n\016AddressTricore\022\r\n\005value\030\001 "
    "\001(\007\022$\n\013access_type\030\002 \001(\0162\017.ssa.AccessTyp"
    "e\"\311\001\n\010Constant\022(\n\014constant_x64\030\001 \001(\0132\020.s"
    "sa.ConstantX64H\000\0220\n\020constant_tricore\030\002 \001"
    "(\0132\024.ssa.ConstantTricoreH\000\022.\n\017address_tr"
    "icore\030\003 \001(\0132\023.ssa.AddressTricoreH\000\022&\n\013ad"
    "dress_x64\030\004 \001(\0132\017.ssa.AddressX64H\000B\t\n\007co"
    "ntent\"\260\001\n\tMemoryX64\022\033\n\004base\030\001 \001(\0132\r.ssa."
    "Register\022\035\n\006offset\030\002 \001(\0132\r.ssa.Constant\022"
    "$\n\013access_type\030\003 \001(\0162\017.ssa.AccessType\022\034\n"
    "\005index\030\004 \001(\0132\r.ssa.Register\022#\n\014index_fac"
    "tor\030\005 \001(\0132\r.ssa.Constant\"\240\001\n\rMemoryTrico"
    "re\022\033\n\004base\030\001 \001(\0132\r.ssa.Register\022\035\n\006offse"
    "t\030\002 \001(\0132\r.ssa.Constant\022$\n\013access_type\030\003 "
    "\001(\0162\017.ssa.AccessType\022\025\n\rpre_increment\030\004 "
    "\001(\010\022\026\n\016post_increment\030\005 \001(\010\"g\n\006Memory\022$\n"
    "\nmemory_x64\030\001 \001(\0132\016.ssa.MemoryX64H\000\022,\n\016m"
    "emory_tricore\030\002 \001(\0132\022.ssa.MemoryTricoreH"
    "\000B\t\n\007content\"V\n\021CallingConvention\022\017\n\007add"
    "ress\030\001 \001(\006\022\020\n\010mnemonic\030\002 \001(\t\022\036\n\010operands"
    "\030\003 \003(\0132\014.ssa.Operand\"T\n\017BaseInstruction\022"
    "\017\n\007address\030\001 \001(\006\022\020\n\010mnemonic\030\002 \001(\t\022\036\n\010op"
    "erands\030\003 \003(\0132\014.ssa.Operand\"L\n\007PhiNode\022\017\n"
    "\007address\030\001 \001(\006\022\020\n\010mnemonic\030\002 \001(\t\022\036\n\010oper"
    "ands\030\003 \003(\0132\014.ssa.Operand\"y\n\007Operand\022!\n\010r"
    "egister\030\001 \001(\0132\r.ssa.RegisterH\000\022!\n\010consta"
    "nt\030\002 \001(\0132\r.ssa.ConstantH\000\022\035\n\006memory\030\003 \001("
    "\0132\013.ssa.MemoryH\000B\t\n\007content\"\235\001\n\013Instruct"
    "ion\0224\n\022calling_convention\030\001 \001(\0132\026.ssa.Ca"
    "llingConventionH\000\022+\n\013instruction\030\002 \001(\0132\024"
    ".ssa.BaseInstructionH\000\022 \n\010phi_node\030\003 \001(\013"
    "2\014.ssa.PhiNodeH\000B\t\n\007content\"|\n\nBasicBloc"
    "k\022\017\n\007address\030\001 \001(\006\022\013\n\003end\030\002 \001(\006\022&\n\014instr"
    "uctions\030\003 \003(\0132\020.ssa.Instruction\022\024\n\014prede"
    "cessors\030\004 \003(\006\022\022\n\nsuccessors\030\005 \003(\006\"B\n\010Fun"
    "ction\022\017\n\007address\030\001 \001(\006\022%\n\014basic_blocks\030\002"
    " \003(\0132\017.ssa.BasicBlock\"-\n\tFunctions\022 \n\tfu"
    "nctions\030\001 \003(\0132\r.ssa.Function*=\n\nAccessTy"
    "pe\022\013\n\007UNKNOWN\020\000\022\010\n\004READ\020\001\022\t\n\005WRITE\020\002\022\r\n\t"
    "READWRITE\020\003b\006proto3", 2219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssa_export.proto", &protobuf_RegisterTypes);
  RegisterX64::default_instance_ = new RegisterX64();
  RegisterTricore::default_instance_ = new RegisterTricore();
  BitTricore::default_instance_ = new BitTricore();
  Register::default_instance_ = new Register();
  Register_default_oneof_instance_ = new RegisterOneofInstance();
  ConstantX64::default_instance_ = new ConstantX64();
  AddressX64::default_instance_ = new AddressX64();
  ConstantTricore::default_instance_ = new ConstantTricore();
  AddressTricore::default_instance_ = new AddressTricore();
  Constant::default_instance_ = new Constant();
  Constant_default_oneof_instance_ = new ConstantOneofInstance();
  MemoryX64::default_instance_ = new MemoryX64();
  MemoryTricore::default_instance_ = new MemoryTricore();
  Memory::default_instance_ = new Memory();
  Memory_default_oneof_instance_ = new MemoryOneofInstance();
  CallingConvention::default_instance_ = new CallingConvention();
  BaseInstruction::default_instance_ = new BaseInstruction();
  PhiNode::default_instance_ = new PhiNode();
  Operand::default_instance_ = new Operand();
  Operand_default_oneof_instance_ = new OperandOneofInstance();
  Instruction::default_instance_ = new Instruction();
  Instruction_default_oneof_instance_ = new InstructionOneofInstance();
  BasicBlock::default_instance_ = new BasicBlock();
  Function::default_instance_ = new Function();
  Functions::default_instance_ = new Functions();
  RegisterX64::default_instance_->InitAsDefaultInstance();
  RegisterTricore::default_instance_->InitAsDefaultInstance();
  BitTricore::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  ConstantX64::default_instance_->InitAsDefaultInstance();
  AddressX64::default_instance_->InitAsDefaultInstance();
  ConstantTricore::default_instance_->InitAsDefaultInstance();
  AddressTricore::default_instance_->InitAsDefaultInstance();
  Constant::default_instance_->InitAsDefaultInstance();
  MemoryX64::default_instance_->InitAsDefaultInstance();
  MemoryTricore::default_instance_->InitAsDefaultInstance();
  Memory::default_instance_->InitAsDefaultInstance();
  CallingConvention::default_instance_->InitAsDefaultInstance();
  BaseInstruction::default_instance_->InitAsDefaultInstance();
  PhiNode::default_instance_->InitAsDefaultInstance();
  Operand::default_instance_->InitAsDefaultInstance();
  Instruction::default_instance_->InitAsDefaultInstance();
  BasicBlock::default_instance_->InitAsDefaultInstance();
  Function::default_instance_->InitAsDefaultInstance();
  Functions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ssa_5fexport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ssa_5fexport_2eproto {
  StaticDescriptorInitializer_ssa_5fexport_2eproto() {
    protobuf_AddDesc_ssa_5fexport_2eproto();
  }
} static_descriptor_initializer_ssa_5fexport_2eproto_;
const ::google::protobuf::EnumDescriptor* AccessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessType_descriptor_;
}
bool AccessType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterX64::kIndexFieldNumber;
const int RegisterX64::kPhiIndexFieldNumber;
const int RegisterX64::kAccessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterX64::RegisterX64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.RegisterX64)
}

void RegisterX64::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterX64::RegisterX64(const RegisterX64& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.RegisterX64)
}

void RegisterX64::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  index_ = 0u;
  phi_index_ = 0;
  access_type_ = 0;
}

RegisterX64::~RegisterX64() {
  // @@protoc_insertion_point(destructor:ssa.RegisterX64)
  SharedDtor();
}

void RegisterX64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterX64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterX64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterX64_descriptor_;
}

const RegisterX64& RegisterX64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

RegisterX64* RegisterX64::default_instance_ = NULL;

RegisterX64* RegisterX64::New(::google::protobuf::Arena* arena) const {
  RegisterX64* n = new RegisterX64;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterX64::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.RegisterX64)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegisterX64, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegisterX64*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, access_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool RegisterX64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.RegisterX64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 index = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_phi_index;
        break;
      }

      // optional sfixed32 phi_index = 2;
      case 2: {
        if (tag == 21) {
         parse_phi_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &phi_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 3;
      case 3: {
        if (tag == 24) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.RegisterX64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.RegisterX64)
  return false;
#undef DO_
}

void RegisterX64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.RegisterX64)
  // optional fixed32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->index(), output);
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->phi_index(), output);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->access_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.RegisterX64)
}

::google::protobuf::uint8* RegisterX64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.RegisterX64)
  // optional fixed32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->index(), target);
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->phi_index(), target);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->access_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.RegisterX64)
  return target;
}

int RegisterX64::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.RegisterX64)
  int total_size = 0;

  // optional fixed32 index = 1;
  if (this->index() != 0) {
    total_size += 1 + 4;
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    total_size += 1 + 4;
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterX64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.RegisterX64)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterX64* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterX64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.RegisterX64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.RegisterX64)
    MergeFrom(*source);
  }
}

void RegisterX64::MergeFrom(const RegisterX64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.RegisterX64)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.phi_index() != 0) {
    set_phi_index(from.phi_index());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
}

void RegisterX64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.RegisterX64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterX64::CopyFrom(const RegisterX64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.RegisterX64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterX64::IsInitialized() const {

  return true;
}

void RegisterX64::Swap(RegisterX64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterX64::InternalSwap(RegisterX64* other) {
  std::swap(index_, other->index_);
  std::swap(phi_index_, other->phi_index_);
  std::swap(access_type_, other->access_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterX64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterX64_descriptor_;
  metadata.reflection = RegisterX64_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterX64

// optional fixed32 index = 1;
void RegisterX64::clear_index() {
  index_ = 0u;
}
 ::google::protobuf::uint32 RegisterX64::index() const {
  // @@protoc_insertion_point(field_get:ssa.RegisterX64.index)
  return index_;
}
 void RegisterX64::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:ssa.RegisterX64.index)
}

// optional sfixed32 phi_index = 2;
void RegisterX64::clear_phi_index() {
  phi_index_ = 0;
}
 ::google::protobuf::int32 RegisterX64::phi_index() const {
  // @@protoc_insertion_point(field_get:ssa.RegisterX64.phi_index)
  return phi_index_;
}
 void RegisterX64::set_phi_index(::google::protobuf::int32 value) {
  
  phi_index_ = value;
  // @@protoc_insertion_point(field_set:ssa.RegisterX64.phi_index)
}

// optional .ssa.AccessType access_type = 3;
void RegisterX64::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType RegisterX64::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.RegisterX64.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void RegisterX64::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.RegisterX64.access_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterTricore::kIndexFieldNumber;
const int RegisterTricore::kPhiIndexFieldNumber;
const int RegisterTricore::kAccessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterTricore::RegisterTricore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.RegisterTricore)
}

void RegisterTricore::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RegisterTricore::RegisterTricore(const RegisterTricore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.RegisterTricore)
}

void RegisterTricore::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  index_ = 0u;
  phi_index_ = 0;
  access_type_ = 0;
}

RegisterTricore::~RegisterTricore() {
  // @@protoc_insertion_point(destructor:ssa.RegisterTricore)
  SharedDtor();
}

void RegisterTricore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterTricore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterTricore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterTricore_descriptor_;
}

const RegisterTricore& RegisterTricore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

RegisterTricore* RegisterTricore::default_instance_ = NULL;

RegisterTricore* RegisterTricore::New(::google::protobuf::Arena* arena) const {
  RegisterTricore* n = new RegisterTricore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterTricore::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.RegisterTricore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RegisterTricore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RegisterTricore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, access_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool RegisterTricore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.RegisterTricore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 index = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_phi_index;
        break;
      }

      // optional sfixed32 phi_index = 2;
      case 2: {
        if (tag == 21) {
         parse_phi_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &phi_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 3;
      case 3: {
        if (tag == 24) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.RegisterTricore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.RegisterTricore)
  return false;
#undef DO_
}

void RegisterTricore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.RegisterTricore)
  // optional fixed32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->index(), output);
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->phi_index(), output);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->access_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.RegisterTricore)
}

::google::protobuf::uint8* RegisterTricore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.RegisterTricore)
  // optional fixed32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->index(), target);
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->phi_index(), target);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->access_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.RegisterTricore)
  return target;
}

int RegisterTricore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.RegisterTricore)
  int total_size = 0;

  // optional fixed32 index = 1;
  if (this->index() != 0) {
    total_size += 1 + 4;
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    total_size += 1 + 4;
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterTricore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.RegisterTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterTricore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterTricore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.RegisterTricore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.RegisterTricore)
    MergeFrom(*source);
  }
}

void RegisterTricore::MergeFrom(const RegisterTricore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.RegisterTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.phi_index() != 0) {
    set_phi_index(from.phi_index());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
}

void RegisterTricore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.RegisterTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterTricore::CopyFrom(const RegisterTricore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.RegisterTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterTricore::IsInitialized() const {

  return true;
}

void RegisterTricore::Swap(RegisterTricore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterTricore::InternalSwap(RegisterTricore* other) {
  std::swap(index_, other->index_);
  std::swap(phi_index_, other->phi_index_);
  std::swap(access_type_, other->access_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterTricore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterTricore_descriptor_;
  metadata.reflection = RegisterTricore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterTricore

// optional fixed32 index = 1;
void RegisterTricore::clear_index() {
  index_ = 0u;
}
 ::google::protobuf::uint32 RegisterTricore::index() const {
  // @@protoc_insertion_point(field_get:ssa.RegisterTricore.index)
  return index_;
}
 void RegisterTricore::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:ssa.RegisterTricore.index)
}

// optional sfixed32 phi_index = 2;
void RegisterTricore::clear_phi_index() {
  phi_index_ = 0;
}
 ::google::protobuf::int32 RegisterTricore::phi_index() const {
  // @@protoc_insertion_point(field_get:ssa.RegisterTricore.phi_index)
  return phi_index_;
}
 void RegisterTricore::set_phi_index(::google::protobuf::int32 value) {
  
  phi_index_ = value;
  // @@protoc_insertion_point(field_set:ssa.RegisterTricore.phi_index)
}

// optional .ssa.AccessType access_type = 3;
void RegisterTricore::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType RegisterTricore::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.RegisterTricore.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void RegisterTricore::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.RegisterTricore.access_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BitTricore::kIndexFieldNumber;
const int BitTricore::kPhiIndexFieldNumber;
const int BitTricore::kAccessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BitTricore::BitTricore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.BitTricore)
}

void BitTricore::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BitTricore::BitTricore(const BitTricore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.BitTricore)
}

void BitTricore::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  index_ = 0u;
  phi_index_ = 0;
  access_type_ = 0;
}

BitTricore::~BitTricore() {
  // @@protoc_insertion_point(destructor:ssa.BitTricore)
  SharedDtor();
}

void BitTricore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BitTricore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitTricore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitTricore_descriptor_;
}

const BitTricore& BitTricore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

BitTricore* BitTricore::default_instance_ = NULL;

BitTricore* BitTricore::New(::google::protobuf::Arena* arena) const {
  BitTricore* n = new BitTricore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BitTricore::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.BitTricore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BitTricore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BitTricore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, access_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool BitTricore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.BitTricore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 index = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_phi_index;
        break;
      }

      // optional sfixed32 phi_index = 2;
      case 2: {
        if (tag == 21) {
         parse_phi_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &phi_index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 3;
      case 3: {
        if (tag == 24) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.BitTricore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.BitTricore)
  return false;
#undef DO_
}

void BitTricore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.BitTricore)
  // optional fixed32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->index(), output);
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->phi_index(), output);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->access_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.BitTricore)
}

::google::protobuf::uint8* BitTricore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.BitTricore)
  // optional fixed32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->index(), target);
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->phi_index(), target);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->access_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.BitTricore)
  return target;
}

int BitTricore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.BitTricore)
  int total_size = 0;

  // optional fixed32 index = 1;
  if (this->index() != 0) {
    total_size += 1 + 4;
  }

  // optional sfixed32 phi_index = 2;
  if (this->phi_index() != 0) {
    total_size += 1 + 4;
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitTricore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.BitTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BitTricore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BitTricore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.BitTricore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.BitTricore)
    MergeFrom(*source);
  }
}

void BitTricore::MergeFrom(const BitTricore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.BitTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.phi_index() != 0) {
    set_phi_index(from.phi_index());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
}

void BitTricore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.BitTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitTricore::CopyFrom(const BitTricore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.BitTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitTricore::IsInitialized() const {

  return true;
}

void BitTricore::Swap(BitTricore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BitTricore::InternalSwap(BitTricore* other) {
  std::swap(index_, other->index_);
  std::swap(phi_index_, other->phi_index_);
  std::swap(access_type_, other->access_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BitTricore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitTricore_descriptor_;
  metadata.reflection = BitTricore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BitTricore

// optional fixed32 index = 1;
void BitTricore::clear_index() {
  index_ = 0u;
}
 ::google::protobuf::uint32 BitTricore::index() const {
  // @@protoc_insertion_point(field_get:ssa.BitTricore.index)
  return index_;
}
 void BitTricore::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:ssa.BitTricore.index)
}

// optional sfixed32 phi_index = 2;
void BitTricore::clear_phi_index() {
  phi_index_ = 0;
}
 ::google::protobuf::int32 BitTricore::phi_index() const {
  // @@protoc_insertion_point(field_get:ssa.BitTricore.phi_index)
  return phi_index_;
}
 void BitTricore::set_phi_index(::google::protobuf::int32 value) {
  
  phi_index_ = value;
  // @@protoc_insertion_point(field_set:ssa.BitTricore.phi_index)
}

// optional .ssa.AccessType access_type = 3;
void BitTricore::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType BitTricore::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.BitTricore.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void BitTricore::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.BitTricore.access_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Register::kRegisterX64FieldNumber;
const int Register::kRegisterTricoreFieldNumber;
const int Register::kBitTricoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Register::Register()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.Register)
}

void Register::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Register_default_oneof_instance_->register_x64_ = const_cast< ::ssa::RegisterX64*>(&::ssa::RegisterX64::default_instance());
  Register_default_oneof_instance_->register_tricore_ = const_cast< ::ssa::RegisterTricore*>(&::ssa::RegisterTricore::default_instance());
  Register_default_oneof_instance_->bit_tricore_ = const_cast< ::ssa::BitTricore*>(&::ssa::BitTricore::default_instance());
}

Register::Register(const Register& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.Register)
}

void Register::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_content();
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:ssa.Register)
  SharedDtor();
}

void Register::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
  if (this != default_instance_) {
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New(::google::protobuf::Arena* arena) const {
  Register* n = new Register;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Register::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:ssa.Register)
  switch(content_case()) {
    case kRegisterX64: {
      delete content_.register_x64_;
      break;
    }
    case kRegisterTricore: {
      delete content_.register_tricore_;
      break;
    }
    case kBitTricore: {
      delete content_.bit_tricore_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Register::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.Register)
  clear_content();
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssa.RegisterX64 register_x64 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_x64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_register_tricore;
        break;
      }

      // optional .ssa.RegisterTricore register_tricore = 2;
      case 2: {
        if (tag == 18) {
         parse_register_tricore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_tricore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bit_tricore;
        break;
      }

      // optional .ssa.BitTricore bit_tricore = 3;
      case 3: {
        if (tag == 26) {
         parse_bit_tricore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bit_tricore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.Register)
  return false;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.Register)
  // optional .ssa.RegisterX64 register_x64 = 1;
  if (has_register_x64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *content_.register_x64_, output);
  }

  // optional .ssa.RegisterTricore register_tricore = 2;
  if (has_register_tricore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *content_.register_tricore_, output);
  }

  // optional .ssa.BitTricore bit_tricore = 3;
  if (has_bit_tricore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *content_.bit_tricore_, output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.Register)
}

::google::protobuf::uint8* Register::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.Register)
  // optional .ssa.RegisterX64 register_x64 = 1;
  if (has_register_x64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *content_.register_x64_, false, target);
  }

  // optional .ssa.RegisterTricore register_tricore = 2;
  if (has_register_tricore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *content_.register_tricore_, false, target);
  }

  // optional .ssa.BitTricore bit_tricore = 3;
  if (has_bit_tricore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *content_.bit_tricore_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.Register)
  return target;
}

int Register::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.Register)
  int total_size = 0;

  switch (content_case()) {
    // optional .ssa.RegisterX64 register_x64 = 1;
    case kRegisterX64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.register_x64_);
      break;
    }
    // optional .ssa.RegisterTricore register_tricore = 2;
    case kRegisterTricore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.register_tricore_);
      break;
    }
    // optional .ssa.BitTricore bit_tricore = 3;
    case kBitTricore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.bit_tricore_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.Register)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Register* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Register>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.Register)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.Register)
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.Register)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.content_case()) {
    case kRegisterX64: {
      mutable_register_x64()->::ssa::RegisterX64::MergeFrom(from.register_x64());
      break;
    }
    case kRegisterTricore: {
      mutable_register_tricore()->::ssa::RegisterTricore::MergeFrom(from.register_tricore());
      break;
    }
    case kBitTricore: {
      mutable_bit_tricore()->::ssa::BitTricore::MergeFrom(from.bit_tricore());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {

  return true;
}

void Register::Swap(Register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Register::InternalSwap(Register* other) {
  std::swap(content_, other->content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Register

// optional .ssa.RegisterX64 register_x64 = 1;
bool Register::has_register_x64() const {
  return content_case() == kRegisterX64;
}
void Register::set_has_register_x64() {
  _oneof_case_[0] = kRegisterX64;
}
void Register::clear_register_x64() {
  if (has_register_x64()) {
    delete content_.register_x64_;
    clear_has_content();
  }
}
 const ::ssa::RegisterX64& Register::register_x64() const {
  // @@protoc_insertion_point(field_get:ssa.Register.register_x64)
  return has_register_x64()
      ? *content_.register_x64_
      : ::ssa::RegisterX64::default_instance();
}
::ssa::RegisterX64* Register::mutable_register_x64() {
  if (!has_register_x64()) {
    clear_content();
    set_has_register_x64();
    content_.register_x64_ = new ::ssa::RegisterX64;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Register.register_x64)
  return content_.register_x64_;
}
::ssa::RegisterX64* Register::release_register_x64() {
  // @@protoc_insertion_point(field_release:ssa.Register.register_x64)
  if (has_register_x64()) {
    clear_has_content();
    ::ssa::RegisterX64* temp = content_.register_x64_;
    content_.register_x64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Register::set_allocated_register_x64(::ssa::RegisterX64* register_x64) {
  clear_content();
  if (register_x64) {
    set_has_register_x64();
    content_.register_x64_ = register_x64;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Register.register_x64)
}

// optional .ssa.RegisterTricore register_tricore = 2;
bool Register::has_register_tricore() const {
  return content_case() == kRegisterTricore;
}
void Register::set_has_register_tricore() {
  _oneof_case_[0] = kRegisterTricore;
}
void Register::clear_register_tricore() {
  if (has_register_tricore()) {
    delete content_.register_tricore_;
    clear_has_content();
  }
}
 const ::ssa::RegisterTricore& Register::register_tricore() const {
  // @@protoc_insertion_point(field_get:ssa.Register.register_tricore)
  return has_register_tricore()
      ? *content_.register_tricore_
      : ::ssa::RegisterTricore::default_instance();
}
::ssa::RegisterTricore* Register::mutable_register_tricore() {
  if (!has_register_tricore()) {
    clear_content();
    set_has_register_tricore();
    content_.register_tricore_ = new ::ssa::RegisterTricore;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Register.register_tricore)
  return content_.register_tricore_;
}
::ssa::RegisterTricore* Register::release_register_tricore() {
  // @@protoc_insertion_point(field_release:ssa.Register.register_tricore)
  if (has_register_tricore()) {
    clear_has_content();
    ::ssa::RegisterTricore* temp = content_.register_tricore_;
    content_.register_tricore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Register::set_allocated_register_tricore(::ssa::RegisterTricore* register_tricore) {
  clear_content();
  if (register_tricore) {
    set_has_register_tricore();
    content_.register_tricore_ = register_tricore;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Register.register_tricore)
}

// optional .ssa.BitTricore bit_tricore = 3;
bool Register::has_bit_tricore() const {
  return content_case() == kBitTricore;
}
void Register::set_has_bit_tricore() {
  _oneof_case_[0] = kBitTricore;
}
void Register::clear_bit_tricore() {
  if (has_bit_tricore()) {
    delete content_.bit_tricore_;
    clear_has_content();
  }
}
 const ::ssa::BitTricore& Register::bit_tricore() const {
  // @@protoc_insertion_point(field_get:ssa.Register.bit_tricore)
  return has_bit_tricore()
      ? *content_.bit_tricore_
      : ::ssa::BitTricore::default_instance();
}
::ssa::BitTricore* Register::mutable_bit_tricore() {
  if (!has_bit_tricore()) {
    clear_content();
    set_has_bit_tricore();
    content_.bit_tricore_ = new ::ssa::BitTricore;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Register.bit_tricore)
  return content_.bit_tricore_;
}
::ssa::BitTricore* Register::release_bit_tricore() {
  // @@protoc_insertion_point(field_release:ssa.Register.bit_tricore)
  if (has_bit_tricore()) {
    clear_has_content();
    ::ssa::BitTricore* temp = content_.bit_tricore_;
    content_.bit_tricore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Register::set_allocated_bit_tricore(::ssa::BitTricore* bit_tricore) {
  clear_content();
  if (bit_tricore) {
    set_has_bit_tricore();
    content_.bit_tricore_ = bit_tricore;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Register.bit_tricore)
}

bool Register::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void Register::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
Register::ContentCase Register::content_case() const {
  return Register::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstantX64::kValueFieldNumber;
const int ConstantX64::kAccessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstantX64::ConstantX64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.ConstantX64)
}

void ConstantX64::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConstantX64::ConstantX64(const ConstantX64& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.ConstantX64)
}

void ConstantX64::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  access_type_ = 0;
}

ConstantX64::~ConstantX64() {
  // @@protoc_insertion_point(destructor:ssa.ConstantX64)
  SharedDtor();
}

void ConstantX64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConstantX64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstantX64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstantX64_descriptor_;
}

const ConstantX64& ConstantX64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

ConstantX64* ConstantX64::default_instance_ = NULL;

ConstantX64* ConstantX64::New(::google::protobuf::Arena* arena) const {
  ConstantX64* n = new ConstantX64;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstantX64::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.ConstantX64)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConstantX64, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConstantX64*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, access_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool ConstantX64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.ConstantX64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed64 value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 2;
      case 2: {
        if (tag == 16) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.ConstantX64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.ConstantX64)
  return false;
#undef DO_
}

void ConstantX64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.ConstantX64)
  // optional sfixed64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->value(), output);
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->access_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.ConstantX64)
}

::google::protobuf::uint8* ConstantX64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.ConstantX64)
  // optional sfixed64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->value(), target);
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->access_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.ConstantX64)
  return target;
}

int ConstantX64::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.ConstantX64)
  int total_size = 0;

  // optional sfixed64 value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstantX64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.ConstantX64)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConstantX64* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstantX64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.ConstantX64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.ConstantX64)
    MergeFrom(*source);
  }
}

void ConstantX64::MergeFrom(const ConstantX64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.ConstantX64)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
}

void ConstantX64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.ConstantX64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantX64::CopyFrom(const ConstantX64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.ConstantX64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantX64::IsInitialized() const {

  return true;
}

void ConstantX64::Swap(ConstantX64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstantX64::InternalSwap(ConstantX64* other) {
  std::swap(value_, other->value_);
  std::swap(access_type_, other->access_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstantX64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstantX64_descriptor_;
  metadata.reflection = ConstantX64_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstantX64

// optional sfixed64 value = 1;
void ConstantX64::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 ConstantX64::value() const {
  // @@protoc_insertion_point(field_get:ssa.ConstantX64.value)
  return value_;
}
 void ConstantX64::set_value(::google::protobuf::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ssa.ConstantX64.value)
}

// optional .ssa.AccessType access_type = 2;
void ConstantX64::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType ConstantX64::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.ConstantX64.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void ConstantX64::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.ConstantX64.access_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddressX64::kValueFieldNumber;
const int AddressX64::kAccessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddressX64::AddressX64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.AddressX64)
}

void AddressX64::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddressX64::AddressX64(const AddressX64& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.AddressX64)
}

void AddressX64::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = GOOGLE_ULONGLONG(0);
  access_type_ = 0;
}

AddressX64::~AddressX64() {
  // @@protoc_insertion_point(destructor:ssa.AddressX64)
  SharedDtor();
}

void AddressX64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressX64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressX64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressX64_descriptor_;
}

const AddressX64& AddressX64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

AddressX64* AddressX64::default_instance_ = NULL;

AddressX64* AddressX64::New(::google::protobuf::Arena* arena) const {
  AddressX64* n = new AddressX64;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddressX64::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.AddressX64)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AddressX64, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddressX64*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, access_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddressX64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.AddressX64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 value = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 2;
      case 2: {
        if (tag == 16) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.AddressX64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.AddressX64)
  return false;
#undef DO_
}

void AddressX64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.AddressX64)
  // optional fixed64 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->value(), output);
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->access_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.AddressX64)
}

::google::protobuf::uint8* AddressX64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.AddressX64)
  // optional fixed64 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->value(), target);
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->access_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.AddressX64)
  return target;
}

int AddressX64::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.AddressX64)
  int total_size = 0;

  // optional fixed64 value = 1;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressX64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.AddressX64)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddressX64* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddressX64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.AddressX64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.AddressX64)
    MergeFrom(*source);
  }
}

void AddressX64::MergeFrom(const AddressX64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.AddressX64)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
}

void AddressX64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.AddressX64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressX64::CopyFrom(const AddressX64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.AddressX64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressX64::IsInitialized() const {

  return true;
}

void AddressX64::Swap(AddressX64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddressX64::InternalSwap(AddressX64* other) {
  std::swap(value_, other->value_);
  std::swap(access_type_, other->access_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddressX64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressX64_descriptor_;
  metadata.reflection = AddressX64_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddressX64

// optional fixed64 value = 1;
void AddressX64::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AddressX64::value() const {
  // @@protoc_insertion_point(field_get:ssa.AddressX64.value)
  return value_;
}
 void AddressX64::set_value(::google::protobuf::uint64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ssa.AddressX64.value)
}

// optional .ssa.AccessType access_type = 2;
void AddressX64::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType AddressX64::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.AddressX64.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void AddressX64::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.AddressX64.access_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConstantTricore::kValueFieldNumber;
const int ConstantTricore::kAccessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConstantTricore::ConstantTricore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.ConstantTricore)
}

void ConstantTricore::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ConstantTricore::ConstantTricore(const ConstantTricore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.ConstantTricore)
}

void ConstantTricore::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0;
  access_type_ = 0;
}

ConstantTricore::~ConstantTricore() {
  // @@protoc_insertion_point(destructor:ssa.ConstantTricore)
  SharedDtor();
}

void ConstantTricore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConstantTricore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstantTricore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstantTricore_descriptor_;
}

const ConstantTricore& ConstantTricore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

ConstantTricore* ConstantTricore::default_instance_ = NULL;

ConstantTricore* ConstantTricore::New(::google::protobuf::Arena* arena) const {
  ConstantTricore* n = new ConstantTricore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConstantTricore::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.ConstantTricore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConstantTricore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConstantTricore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, access_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool ConstantTricore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.ConstantTricore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 2;
      case 2: {
        if (tag == 16) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.ConstantTricore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.ConstantTricore)
  return false;
#undef DO_
}

void ConstantTricore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.ConstantTricore)
  // optional sfixed32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->value(), output);
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->access_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.ConstantTricore)
}

::google::protobuf::uint8* ConstantTricore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.ConstantTricore)
  // optional sfixed32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->value(), target);
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->access_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.ConstantTricore)
  return target;
}

int ConstantTricore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.ConstantTricore)
  int total_size = 0;

  // optional sfixed32 value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstantTricore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.ConstantTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConstantTricore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConstantTricore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.ConstantTricore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.ConstantTricore)
    MergeFrom(*source);
  }
}

void ConstantTricore::MergeFrom(const ConstantTricore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.ConstantTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
}

void ConstantTricore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.ConstantTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstantTricore::CopyFrom(const ConstantTricore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.ConstantTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstantTricore::IsInitialized() const {

  return true;
}

void ConstantTricore::Swap(ConstantTricore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConstantTricore::InternalSwap(ConstantTricore* other) {
  std::swap(value_, other->value_);
  std::swap(access_type_, other->access_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConstantTricore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstantTricore_descriptor_;
  metadata.reflection = ConstantTricore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConstantTricore

// optional sfixed32 value = 1;
void ConstantTricore::clear_value() {
  value_ = 0;
}
 ::google::protobuf::int32 ConstantTricore::value() const {
  // @@protoc_insertion_point(field_get:ssa.ConstantTricore.value)
  return value_;
}
 void ConstantTricore::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ssa.ConstantTricore.value)
}

// optional .ssa.AccessType access_type = 2;
void ConstantTricore::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType ConstantTricore::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.ConstantTricore.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void ConstantTricore::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.ConstantTricore.access_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddressTricore::kValueFieldNumber;
const int AddressTricore::kAccessTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddressTricore::AddressTricore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.AddressTricore)
}

void AddressTricore::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AddressTricore::AddressTricore(const AddressTricore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.AddressTricore)
}

void AddressTricore::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = 0u;
  access_type_ = 0;
}

AddressTricore::~AddressTricore() {
  // @@protoc_insertion_point(destructor:ssa.AddressTricore)
  SharedDtor();
}

void AddressTricore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressTricore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressTricore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressTricore_descriptor_;
}

const AddressTricore& AddressTricore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

AddressTricore* AddressTricore::default_instance_ = NULL;

AddressTricore* AddressTricore::New(::google::protobuf::Arena* arena) const {
  AddressTricore* n = new AddressTricore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddressTricore::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.AddressTricore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AddressTricore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AddressTricore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, access_type_);

#undef ZR_HELPER_
#undef ZR_

}

bool AddressTricore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.AddressTricore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 value = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 2;
      case 2: {
        if (tag == 16) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.AddressTricore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.AddressTricore)
  return false;
#undef DO_
}

void AddressTricore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.AddressTricore)
  // optional fixed32 value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->value(), output);
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->access_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.AddressTricore)
}

::google::protobuf::uint8* AddressTricore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.AddressTricore)
  // optional fixed32 value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->value(), target);
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->access_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.AddressTricore)
  return target;
}

int AddressTricore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.AddressTricore)
  int total_size = 0;

  // optional fixed32 value = 1;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  // optional .ssa.AccessType access_type = 2;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressTricore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.AddressTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AddressTricore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddressTricore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.AddressTricore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.AddressTricore)
    MergeFrom(*source);
  }
}

void AddressTricore::MergeFrom(const AddressTricore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.AddressTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
}

void AddressTricore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.AddressTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressTricore::CopyFrom(const AddressTricore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.AddressTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressTricore::IsInitialized() const {

  return true;
}

void AddressTricore::Swap(AddressTricore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddressTricore::InternalSwap(AddressTricore* other) {
  std::swap(value_, other->value_);
  std::swap(access_type_, other->access_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddressTricore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressTricore_descriptor_;
  metadata.reflection = AddressTricore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddressTricore

// optional fixed32 value = 1;
void AddressTricore::clear_value() {
  value_ = 0u;
}
 ::google::protobuf::uint32 AddressTricore::value() const {
  // @@protoc_insertion_point(field_get:ssa.AddressTricore.value)
  return value_;
}
 void AddressTricore::set_value(::google::protobuf::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:ssa.AddressTricore.value)
}

// optional .ssa.AccessType access_type = 2;
void AddressTricore::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType AddressTricore::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.AddressTricore.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void AddressTricore::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.AddressTricore.access_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Constant::kConstantX64FieldNumber;
const int Constant::kConstantTricoreFieldNumber;
const int Constant::kAddressTricoreFieldNumber;
const int Constant::kAddressX64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Constant::Constant()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.Constant)
}

void Constant::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Constant_default_oneof_instance_->constant_x64_ = const_cast< ::ssa::ConstantX64*>(&::ssa::ConstantX64::default_instance());
  Constant_default_oneof_instance_->constant_tricore_ = const_cast< ::ssa::ConstantTricore*>(&::ssa::ConstantTricore::default_instance());
  Constant_default_oneof_instance_->address_tricore_ = const_cast< ::ssa::AddressTricore*>(&::ssa::AddressTricore::default_instance());
  Constant_default_oneof_instance_->address_x64_ = const_cast< ::ssa::AddressX64*>(&::ssa::AddressX64::default_instance());
}

Constant::Constant(const Constant& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.Constant)
}

void Constant::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_content();
}

Constant::~Constant() {
  // @@protoc_insertion_point(destructor:ssa.Constant)
  SharedDtor();
}

void Constant::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
  if (this != default_instance_) {
  }
}

void Constant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Constant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Constant_descriptor_;
}

const Constant& Constant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

Constant* Constant::default_instance_ = NULL;

Constant* Constant::New(::google::protobuf::Arena* arena) const {
  Constant* n = new Constant;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Constant::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:ssa.Constant)
  switch(content_case()) {
    case kConstantX64: {
      delete content_.constant_x64_;
      break;
    }
    case kConstantTricore: {
      delete content_.constant_tricore_;
      break;
    }
    case kAddressTricore: {
      delete content_.address_tricore_;
      break;
    }
    case kAddressX64: {
      delete content_.address_x64_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Constant::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.Constant)
  clear_content();
}

bool Constant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.Constant)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssa.ConstantX64 constant_x64 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constant_x64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_constant_tricore;
        break;
      }

      // optional .ssa.ConstantTricore constant_tricore = 2;
      case 2: {
        if (tag == 18) {
         parse_constant_tricore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constant_tricore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_address_tricore;
        break;
      }

      // optional .ssa.AddressTricore address_tricore = 3;
      case 3: {
        if (tag == 26) {
         parse_address_tricore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address_tricore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_address_x64;
        break;
      }

      // optional .ssa.AddressX64 address_x64 = 4;
      case 4: {
        if (tag == 34) {
         parse_address_x64:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address_x64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.Constant)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.Constant)
  return false;
#undef DO_
}

void Constant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.Constant)
  // optional .ssa.ConstantX64 constant_x64 = 1;
  if (has_constant_x64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *content_.constant_x64_, output);
  }

  // optional .ssa.ConstantTricore constant_tricore = 2;
  if (has_constant_tricore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *content_.constant_tricore_, output);
  }

  // optional .ssa.AddressTricore address_tricore = 3;
  if (has_address_tricore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *content_.address_tricore_, output);
  }

  // optional .ssa.AddressX64 address_x64 = 4;
  if (has_address_x64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *content_.address_x64_, output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.Constant)
}

::google::protobuf::uint8* Constant::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.Constant)
  // optional .ssa.ConstantX64 constant_x64 = 1;
  if (has_constant_x64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *content_.constant_x64_, false, target);
  }

  // optional .ssa.ConstantTricore constant_tricore = 2;
  if (has_constant_tricore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *content_.constant_tricore_, false, target);
  }

  // optional .ssa.AddressTricore address_tricore = 3;
  if (has_address_tricore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *content_.address_tricore_, false, target);
  }

  // optional .ssa.AddressX64 address_x64 = 4;
  if (has_address_x64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *content_.address_x64_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.Constant)
  return target;
}

int Constant::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.Constant)
  int total_size = 0;

  switch (content_case()) {
    // optional .ssa.ConstantX64 constant_x64 = 1;
    case kConstantX64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.constant_x64_);
      break;
    }
    // optional .ssa.ConstantTricore constant_tricore = 2;
    case kConstantTricore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.constant_tricore_);
      break;
    }
    // optional .ssa.AddressTricore address_tricore = 3;
    case kAddressTricore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.address_tricore_);
      break;
    }
    // optional .ssa.AddressX64 address_x64 = 4;
    case kAddressX64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.address_x64_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Constant::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.Constant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Constant* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Constant>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.Constant)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.Constant)
    MergeFrom(*source);
  }
}

void Constant::MergeFrom(const Constant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.Constant)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.content_case()) {
    case kConstantX64: {
      mutable_constant_x64()->::ssa::ConstantX64::MergeFrom(from.constant_x64());
      break;
    }
    case kConstantTricore: {
      mutable_constant_tricore()->::ssa::ConstantTricore::MergeFrom(from.constant_tricore());
      break;
    }
    case kAddressTricore: {
      mutable_address_tricore()->::ssa::AddressTricore::MergeFrom(from.address_tricore());
      break;
    }
    case kAddressX64: {
      mutable_address_x64()->::ssa::AddressX64::MergeFrom(from.address_x64());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Constant::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.Constant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Constant::CopyFrom(const Constant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.Constant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Constant::IsInitialized() const {

  return true;
}

void Constant::Swap(Constant* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Constant::InternalSwap(Constant* other) {
  std::swap(content_, other->content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Constant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Constant_descriptor_;
  metadata.reflection = Constant_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Constant

// optional .ssa.ConstantX64 constant_x64 = 1;
bool Constant::has_constant_x64() const {
  return content_case() == kConstantX64;
}
void Constant::set_has_constant_x64() {
  _oneof_case_[0] = kConstantX64;
}
void Constant::clear_constant_x64() {
  if (has_constant_x64()) {
    delete content_.constant_x64_;
    clear_has_content();
  }
}
 const ::ssa::ConstantX64& Constant::constant_x64() const {
  // @@protoc_insertion_point(field_get:ssa.Constant.constant_x64)
  return has_constant_x64()
      ? *content_.constant_x64_
      : ::ssa::ConstantX64::default_instance();
}
::ssa::ConstantX64* Constant::mutable_constant_x64() {
  if (!has_constant_x64()) {
    clear_content();
    set_has_constant_x64();
    content_.constant_x64_ = new ::ssa::ConstantX64;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Constant.constant_x64)
  return content_.constant_x64_;
}
::ssa::ConstantX64* Constant::release_constant_x64() {
  // @@protoc_insertion_point(field_release:ssa.Constant.constant_x64)
  if (has_constant_x64()) {
    clear_has_content();
    ::ssa::ConstantX64* temp = content_.constant_x64_;
    content_.constant_x64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Constant::set_allocated_constant_x64(::ssa::ConstantX64* constant_x64) {
  clear_content();
  if (constant_x64) {
    set_has_constant_x64();
    content_.constant_x64_ = constant_x64;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Constant.constant_x64)
}

// optional .ssa.ConstantTricore constant_tricore = 2;
bool Constant::has_constant_tricore() const {
  return content_case() == kConstantTricore;
}
void Constant::set_has_constant_tricore() {
  _oneof_case_[0] = kConstantTricore;
}
void Constant::clear_constant_tricore() {
  if (has_constant_tricore()) {
    delete content_.constant_tricore_;
    clear_has_content();
  }
}
 const ::ssa::ConstantTricore& Constant::constant_tricore() const {
  // @@protoc_insertion_point(field_get:ssa.Constant.constant_tricore)
  return has_constant_tricore()
      ? *content_.constant_tricore_
      : ::ssa::ConstantTricore::default_instance();
}
::ssa::ConstantTricore* Constant::mutable_constant_tricore() {
  if (!has_constant_tricore()) {
    clear_content();
    set_has_constant_tricore();
    content_.constant_tricore_ = new ::ssa::ConstantTricore;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Constant.constant_tricore)
  return content_.constant_tricore_;
}
::ssa::ConstantTricore* Constant::release_constant_tricore() {
  // @@protoc_insertion_point(field_release:ssa.Constant.constant_tricore)
  if (has_constant_tricore()) {
    clear_has_content();
    ::ssa::ConstantTricore* temp = content_.constant_tricore_;
    content_.constant_tricore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Constant::set_allocated_constant_tricore(::ssa::ConstantTricore* constant_tricore) {
  clear_content();
  if (constant_tricore) {
    set_has_constant_tricore();
    content_.constant_tricore_ = constant_tricore;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Constant.constant_tricore)
}

// optional .ssa.AddressTricore address_tricore = 3;
bool Constant::has_address_tricore() const {
  return content_case() == kAddressTricore;
}
void Constant::set_has_address_tricore() {
  _oneof_case_[0] = kAddressTricore;
}
void Constant::clear_address_tricore() {
  if (has_address_tricore()) {
    delete content_.address_tricore_;
    clear_has_content();
  }
}
 const ::ssa::AddressTricore& Constant::address_tricore() const {
  // @@protoc_insertion_point(field_get:ssa.Constant.address_tricore)
  return has_address_tricore()
      ? *content_.address_tricore_
      : ::ssa::AddressTricore::default_instance();
}
::ssa::AddressTricore* Constant::mutable_address_tricore() {
  if (!has_address_tricore()) {
    clear_content();
    set_has_address_tricore();
    content_.address_tricore_ = new ::ssa::AddressTricore;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Constant.address_tricore)
  return content_.address_tricore_;
}
::ssa::AddressTricore* Constant::release_address_tricore() {
  // @@protoc_insertion_point(field_release:ssa.Constant.address_tricore)
  if (has_address_tricore()) {
    clear_has_content();
    ::ssa::AddressTricore* temp = content_.address_tricore_;
    content_.address_tricore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Constant::set_allocated_address_tricore(::ssa::AddressTricore* address_tricore) {
  clear_content();
  if (address_tricore) {
    set_has_address_tricore();
    content_.address_tricore_ = address_tricore;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Constant.address_tricore)
}

// optional .ssa.AddressX64 address_x64 = 4;
bool Constant::has_address_x64() const {
  return content_case() == kAddressX64;
}
void Constant::set_has_address_x64() {
  _oneof_case_[0] = kAddressX64;
}
void Constant::clear_address_x64() {
  if (has_address_x64()) {
    delete content_.address_x64_;
    clear_has_content();
  }
}
 const ::ssa::AddressX64& Constant::address_x64() const {
  // @@protoc_insertion_point(field_get:ssa.Constant.address_x64)
  return has_address_x64()
      ? *content_.address_x64_
      : ::ssa::AddressX64::default_instance();
}
::ssa::AddressX64* Constant::mutable_address_x64() {
  if (!has_address_x64()) {
    clear_content();
    set_has_address_x64();
    content_.address_x64_ = new ::ssa::AddressX64;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Constant.address_x64)
  return content_.address_x64_;
}
::ssa::AddressX64* Constant::release_address_x64() {
  // @@protoc_insertion_point(field_release:ssa.Constant.address_x64)
  if (has_address_x64()) {
    clear_has_content();
    ::ssa::AddressX64* temp = content_.address_x64_;
    content_.address_x64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Constant::set_allocated_address_x64(::ssa::AddressX64* address_x64) {
  clear_content();
  if (address_x64) {
    set_has_address_x64();
    content_.address_x64_ = address_x64;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Constant.address_x64)
}

bool Constant::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void Constant::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
Constant::ContentCase Constant::content_case() const {
  return Constant::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryX64::kBaseFieldNumber;
const int MemoryX64::kOffsetFieldNumber;
const int MemoryX64::kAccessTypeFieldNumber;
const int MemoryX64::kIndexFieldNumber;
const int MemoryX64::kIndexFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryX64::MemoryX64()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.MemoryX64)
}

void MemoryX64::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::ssa::Register*>(&::ssa::Register::default_instance());
  offset_ = const_cast< ::ssa::Constant*>(&::ssa::Constant::default_instance());
  index_ = const_cast< ::ssa::Register*>(&::ssa::Register::default_instance());
  index_factor_ = const_cast< ::ssa::Constant*>(&::ssa::Constant::default_instance());
}

MemoryX64::MemoryX64(const MemoryX64& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.MemoryX64)
}

void MemoryX64::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  offset_ = NULL;
  access_type_ = 0;
  index_ = NULL;
  index_factor_ = NULL;
}

MemoryX64::~MemoryX64() {
  // @@protoc_insertion_point(destructor:ssa.MemoryX64)
  SharedDtor();
}

void MemoryX64::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete offset_;
    delete index_;
    delete index_factor_;
  }
}

void MemoryX64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryX64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryX64_descriptor_;
}

const MemoryX64& MemoryX64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

MemoryX64* MemoryX64::default_instance_ = NULL;

MemoryX64* MemoryX64::New(::google::protobuf::Arena* arena) const {
  MemoryX64* n = new MemoryX64;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryX64::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.MemoryX64)
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
  access_type_ = 0;
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
  if (GetArenaNoVirtual() == NULL && index_factor_ != NULL) delete index_factor_;
  index_factor_ = NULL;
}

bool MemoryX64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.MemoryX64)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssa.Register base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offset;
        break;
      }

      // optional .ssa.Constant offset = 2;
      case 2: {
        if (tag == 18) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 3;
      case 3: {
        if (tag == 24) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_index;
        break;
      }

      // optional .ssa.Register index = 4;
      case 4: {
        if (tag == 34) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_index_factor;
        break;
      }

      // optional .ssa.Constant index_factor = 5;
      case 5: {
        if (tag == 42) {
         parse_index_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_index_factor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.MemoryX64)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.MemoryX64)
  return false;
#undef DO_
}

void MemoryX64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.MemoryX64)
  // optional .ssa.Register base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional .ssa.Constant offset = 2;
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->offset_, output);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->access_type(), output);
  }

  // optional .ssa.Register index = 4;
  if (this->has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->index_, output);
  }

  // optional .ssa.Constant index_factor = 5;
  if (this->has_index_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->index_factor_, output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.MemoryX64)
}

::google::protobuf::uint8* MemoryX64::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.MemoryX64)
  // optional .ssa.Register base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // optional .ssa.Constant offset = 2;
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->offset_, false, target);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->access_type(), target);
  }

  // optional .ssa.Register index = 4;
  if (this->has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->index_, false, target);
  }

  // optional .ssa.Constant index_factor = 5;
  if (this->has_index_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->index_factor_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.MemoryX64)
  return target;
}

int MemoryX64::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.MemoryX64)
  int total_size = 0;

  // optional .ssa.Register base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional .ssa.Constant offset = 2;
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  // optional .ssa.Register index = 4;
  if (this->has_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_);
  }

  // optional .ssa.Constant index_factor = 5;
  if (this->has_index_factor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->index_factor_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryX64::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.MemoryX64)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MemoryX64* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryX64>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.MemoryX64)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.MemoryX64)
    MergeFrom(*source);
  }
}

void MemoryX64::MergeFrom(const MemoryX64& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.MemoryX64)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_base()) {
    mutable_base()->::ssa::Register::MergeFrom(from.base());
  }
  if (from.has_offset()) {
    mutable_offset()->::ssa::Constant::MergeFrom(from.offset());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
  if (from.has_index()) {
    mutable_index()->::ssa::Register::MergeFrom(from.index());
  }
  if (from.has_index_factor()) {
    mutable_index_factor()->::ssa::Constant::MergeFrom(from.index_factor());
  }
}

void MemoryX64::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.MemoryX64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryX64::CopyFrom(const MemoryX64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.MemoryX64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryX64::IsInitialized() const {

  return true;
}

void MemoryX64::Swap(MemoryX64* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryX64::InternalSwap(MemoryX64* other) {
  std::swap(base_, other->base_);
  std::swap(offset_, other->offset_);
  std::swap(access_type_, other->access_type_);
  std::swap(index_, other->index_);
  std::swap(index_factor_, other->index_factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryX64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryX64_descriptor_;
  metadata.reflection = MemoryX64_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryX64

// optional .ssa.Register base = 1;
bool MemoryX64::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void MemoryX64::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::ssa::Register& MemoryX64::base() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryX64.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::ssa::Register* MemoryX64::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::ssa::Register;
  }
  // @@protoc_insertion_point(field_mutable:ssa.MemoryX64.base)
  return base_;
}
::ssa::Register* MemoryX64::release_base() {
  // @@protoc_insertion_point(field_release:ssa.MemoryX64.base)
  
  ::ssa::Register* temp = base_;
  base_ = NULL;
  return temp;
}
void MemoryX64::set_allocated_base(::ssa::Register* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.MemoryX64.base)
}

// optional .ssa.Constant offset = 2;
bool MemoryX64::has_offset() const {
  return !_is_default_instance_ && offset_ != NULL;
}
void MemoryX64::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
const ::ssa::Constant& MemoryX64::offset() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryX64.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
::ssa::Constant* MemoryX64::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::ssa::Constant;
  }
  // @@protoc_insertion_point(field_mutable:ssa.MemoryX64.offset)
  return offset_;
}
::ssa::Constant* MemoryX64::release_offset() {
  // @@protoc_insertion_point(field_release:ssa.MemoryX64.offset)
  
  ::ssa::Constant* temp = offset_;
  offset_ = NULL;
  return temp;
}
void MemoryX64::set_allocated_offset(::ssa::Constant* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.MemoryX64.offset)
}

// optional .ssa.AccessType access_type = 3;
void MemoryX64::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType MemoryX64::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryX64.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void MemoryX64::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.MemoryX64.access_type)
}

// optional .ssa.Register index = 4;
bool MemoryX64::has_index() const {
  return !_is_default_instance_ && index_ != NULL;
}
void MemoryX64::clear_index() {
  if (GetArenaNoVirtual() == NULL && index_ != NULL) delete index_;
  index_ = NULL;
}
const ::ssa::Register& MemoryX64::index() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryX64.index)
  return index_ != NULL ? *index_ : *default_instance_->index_;
}
::ssa::Register* MemoryX64::mutable_index() {
  
  if (index_ == NULL) {
    index_ = new ::ssa::Register;
  }
  // @@protoc_insertion_point(field_mutable:ssa.MemoryX64.index)
  return index_;
}
::ssa::Register* MemoryX64::release_index() {
  // @@protoc_insertion_point(field_release:ssa.MemoryX64.index)
  
  ::ssa::Register* temp = index_;
  index_ = NULL;
  return temp;
}
void MemoryX64::set_allocated_index(::ssa::Register* index) {
  delete index_;
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.MemoryX64.index)
}

// optional .ssa.Constant index_factor = 5;
bool MemoryX64::has_index_factor() const {
  return !_is_default_instance_ && index_factor_ != NULL;
}
void MemoryX64::clear_index_factor() {
  if (GetArenaNoVirtual() == NULL && index_factor_ != NULL) delete index_factor_;
  index_factor_ = NULL;
}
const ::ssa::Constant& MemoryX64::index_factor() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryX64.index_factor)
  return index_factor_ != NULL ? *index_factor_ : *default_instance_->index_factor_;
}
::ssa::Constant* MemoryX64::mutable_index_factor() {
  
  if (index_factor_ == NULL) {
    index_factor_ = new ::ssa::Constant;
  }
  // @@protoc_insertion_point(field_mutable:ssa.MemoryX64.index_factor)
  return index_factor_;
}
::ssa::Constant* MemoryX64::release_index_factor() {
  // @@protoc_insertion_point(field_release:ssa.MemoryX64.index_factor)
  
  ::ssa::Constant* temp = index_factor_;
  index_factor_ = NULL;
  return temp;
}
void MemoryX64::set_allocated_index_factor(::ssa::Constant* index_factor) {
  delete index_factor_;
  index_factor_ = index_factor;
  if (index_factor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.MemoryX64.index_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MemoryTricore::kBaseFieldNumber;
const int MemoryTricore::kOffsetFieldNumber;
const int MemoryTricore::kAccessTypeFieldNumber;
const int MemoryTricore::kPreIncrementFieldNumber;
const int MemoryTricore::kPostIncrementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MemoryTricore::MemoryTricore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.MemoryTricore)
}

void MemoryTricore::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::ssa::Register*>(&::ssa::Register::default_instance());
  offset_ = const_cast< ::ssa::Constant*>(&::ssa::Constant::default_instance());
}

MemoryTricore::MemoryTricore(const MemoryTricore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.MemoryTricore)
}

void MemoryTricore::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  offset_ = NULL;
  access_type_ = 0;
  pre_increment_ = false;
  post_increment_ = false;
}

MemoryTricore::~MemoryTricore() {
  // @@protoc_insertion_point(destructor:ssa.MemoryTricore)
  SharedDtor();
}

void MemoryTricore::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete offset_;
  }
}

void MemoryTricore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryTricore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryTricore_descriptor_;
}

const MemoryTricore& MemoryTricore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

MemoryTricore* MemoryTricore::default_instance_ = NULL;

MemoryTricore* MemoryTricore::New(::google::protobuf::Arena* arena) const {
  MemoryTricore* n = new MemoryTricore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MemoryTricore::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.MemoryTricore)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MemoryTricore, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MemoryTricore*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(access_type_, post_increment_);
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool MemoryTricore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.MemoryTricore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssa.Register base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_offset;
        break;
      }

      // optional .ssa.Constant offset = 2;
      case 2: {
        if (tag == 18) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_access_type;
        break;
      }

      // optional .ssa.AccessType access_type = 3;
      case 3: {
        if (tag == 24) {
         parse_access_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_type(static_cast< ::ssa::AccessType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_pre_increment;
        break;
      }

      // optional bool pre_increment = 4;
      case 4: {
        if (tag == 32) {
         parse_pre_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pre_increment_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_post_increment;
        break;
      }

      // optional bool post_increment = 5;
      case 5: {
        if (tag == 40) {
         parse_post_increment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &post_increment_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.MemoryTricore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.MemoryTricore)
  return false;
#undef DO_
}

void MemoryTricore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.MemoryTricore)
  // optional .ssa.Register base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional .ssa.Constant offset = 2;
  if (this->has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->offset_, output);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->access_type(), output);
  }

  // optional bool pre_increment = 4;
  if (this->pre_increment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pre_increment(), output);
  }

  // optional bool post_increment = 5;
  if (this->post_increment() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->post_increment(), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.MemoryTricore)
}

::google::protobuf::uint8* MemoryTricore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.MemoryTricore)
  // optional .ssa.Register base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->base_, false, target);
  }

  // optional .ssa.Constant offset = 2;
  if (this->has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->offset_, false, target);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->access_type(), target);
  }

  // optional bool pre_increment = 4;
  if (this->pre_increment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pre_increment(), target);
  }

  // optional bool post_increment = 5;
  if (this->post_increment() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->post_increment(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.MemoryTricore)
  return target;
}

int MemoryTricore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.MemoryTricore)
  int total_size = 0;

  // optional .ssa.Register base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional .ssa.Constant offset = 2;
  if (this->has_offset()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->offset_);
  }

  // optional .ssa.AccessType access_type = 3;
  if (this->access_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_type());
  }

  // optional bool pre_increment = 4;
  if (this->pre_increment() != 0) {
    total_size += 1 + 1;
  }

  // optional bool post_increment = 5;
  if (this->post_increment() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryTricore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.MemoryTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MemoryTricore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MemoryTricore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.MemoryTricore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.MemoryTricore)
    MergeFrom(*source);
  }
}

void MemoryTricore::MergeFrom(const MemoryTricore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.MemoryTricore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_base()) {
    mutable_base()->::ssa::Register::MergeFrom(from.base());
  }
  if (from.has_offset()) {
    mutable_offset()->::ssa::Constant::MergeFrom(from.offset());
  }
  if (from.access_type() != 0) {
    set_access_type(from.access_type());
  }
  if (from.pre_increment() != 0) {
    set_pre_increment(from.pre_increment());
  }
  if (from.post_increment() != 0) {
    set_post_increment(from.post_increment());
  }
}

void MemoryTricore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.MemoryTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryTricore::CopyFrom(const MemoryTricore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.MemoryTricore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryTricore::IsInitialized() const {

  return true;
}

void MemoryTricore::Swap(MemoryTricore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MemoryTricore::InternalSwap(MemoryTricore* other) {
  std::swap(base_, other->base_);
  std::swap(offset_, other->offset_);
  std::swap(access_type_, other->access_type_);
  std::swap(pre_increment_, other->pre_increment_);
  std::swap(post_increment_, other->post_increment_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MemoryTricore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryTricore_descriptor_;
  metadata.reflection = MemoryTricore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MemoryTricore

// optional .ssa.Register base = 1;
bool MemoryTricore::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void MemoryTricore::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::ssa::Register& MemoryTricore::base() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryTricore.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::ssa::Register* MemoryTricore::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::ssa::Register;
  }
  // @@protoc_insertion_point(field_mutable:ssa.MemoryTricore.base)
  return base_;
}
::ssa::Register* MemoryTricore::release_base() {
  // @@protoc_insertion_point(field_release:ssa.MemoryTricore.base)
  
  ::ssa::Register* temp = base_;
  base_ = NULL;
  return temp;
}
void MemoryTricore::set_allocated_base(::ssa::Register* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.MemoryTricore.base)
}

// optional .ssa.Constant offset = 2;
bool MemoryTricore::has_offset() const {
  return !_is_default_instance_ && offset_ != NULL;
}
void MemoryTricore::clear_offset() {
  if (GetArenaNoVirtual() == NULL && offset_ != NULL) delete offset_;
  offset_ = NULL;
}
const ::ssa::Constant& MemoryTricore::offset() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryTricore.offset)
  return offset_ != NULL ? *offset_ : *default_instance_->offset_;
}
::ssa::Constant* MemoryTricore::mutable_offset() {
  
  if (offset_ == NULL) {
    offset_ = new ::ssa::Constant;
  }
  // @@protoc_insertion_point(field_mutable:ssa.MemoryTricore.offset)
  return offset_;
}
::ssa::Constant* MemoryTricore::release_offset() {
  // @@protoc_insertion_point(field_release:ssa.MemoryTricore.offset)
  
  ::ssa::Constant* temp = offset_;
  offset_ = NULL;
  return temp;
}
void MemoryTricore::set_allocated_offset(::ssa::Constant* offset) {
  delete offset_;
  offset_ = offset;
  if (offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.MemoryTricore.offset)
}

// optional .ssa.AccessType access_type = 3;
void MemoryTricore::clear_access_type() {
  access_type_ = 0;
}
 ::ssa::AccessType MemoryTricore::access_type() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryTricore.access_type)
  return static_cast< ::ssa::AccessType >(access_type_);
}
 void MemoryTricore::set_access_type(::ssa::AccessType value) {
  
  access_type_ = value;
  // @@protoc_insertion_point(field_set:ssa.MemoryTricore.access_type)
}

// optional bool pre_increment = 4;
void MemoryTricore::clear_pre_increment() {
  pre_increment_ = false;
}
 bool MemoryTricore::pre_increment() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryTricore.pre_increment)
  return pre_increment_;
}
 void MemoryTricore::set_pre_increment(bool value) {
  
  pre_increment_ = value;
  // @@protoc_insertion_point(field_set:ssa.MemoryTricore.pre_increment)
}

// optional bool post_increment = 5;
void MemoryTricore::clear_post_increment() {
  post_increment_ = false;
}
 bool MemoryTricore::post_increment() const {
  // @@protoc_insertion_point(field_get:ssa.MemoryTricore.post_increment)
  return post_increment_;
}
 void MemoryTricore::set_post_increment(bool value) {
  
  post_increment_ = value;
  // @@protoc_insertion_point(field_set:ssa.MemoryTricore.post_increment)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memory::kMemoryX64FieldNumber;
const int Memory::kMemoryTricoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memory::Memory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.Memory)
}

void Memory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Memory_default_oneof_instance_->memory_x64_ = const_cast< ::ssa::MemoryX64*>(&::ssa::MemoryX64::default_instance());
  Memory_default_oneof_instance_->memory_tricore_ = const_cast< ::ssa::MemoryTricore*>(&::ssa::MemoryTricore::default_instance());
}

Memory::Memory(const Memory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.Memory)
}

void Memory::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_content();
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:ssa.Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
  if (this != default_instance_) {
  }
}

void Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Memory_descriptor_;
}

const Memory& Memory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

Memory* Memory::default_instance_ = NULL;

Memory* Memory::New(::google::protobuf::Arena* arena) const {
  Memory* n = new Memory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Memory::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:ssa.Memory)
  switch(content_case()) {
    case kMemoryX64: {
      delete content_.memory_x64_;
      break;
    }
    case kMemoryTricore: {
      delete content_.memory_tricore_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.Memory)
  clear_content();
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssa.MemoryX64 memory_x64 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_x64()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_memory_tricore;
        break;
      }

      // optional .ssa.MemoryTricore memory_tricore = 2;
      case 2: {
        if (tag == 18) {
         parse_memory_tricore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory_tricore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.Memory)
  return false;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.Memory)
  // optional .ssa.MemoryX64 memory_x64 = 1;
  if (has_memory_x64()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *content_.memory_x64_, output);
  }

  // optional .ssa.MemoryTricore memory_tricore = 2;
  if (has_memory_tricore()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *content_.memory_tricore_, output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.Memory)
}

::google::protobuf::uint8* Memory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.Memory)
  // optional .ssa.MemoryX64 memory_x64 = 1;
  if (has_memory_x64()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *content_.memory_x64_, false, target);
  }

  // optional .ssa.MemoryTricore memory_tricore = 2;
  if (has_memory_tricore()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *content_.memory_tricore_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.Memory)
  return target;
}

int Memory::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.Memory)
  int total_size = 0;

  switch (content_case()) {
    // optional .ssa.MemoryX64 memory_x64 = 1;
    case kMemoryX64: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.memory_x64_);
      break;
    }
    // optional .ssa.MemoryTricore memory_tricore = 2;
    case kMemoryTricore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.memory_tricore_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.Memory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Memory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Memory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.Memory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.Memory)
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.Memory)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.content_case()) {
    case kMemoryX64: {
      mutable_memory_x64()->::ssa::MemoryX64::MergeFrom(from.memory_x64());
      break;
    }
    case kMemoryTricore: {
      mutable_memory_tricore()->::ssa::MemoryTricore::MergeFrom(from.memory_tricore());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {

  return true;
}

void Memory::Swap(Memory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memory::InternalSwap(Memory* other) {
  std::swap(content_, other->content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Memory_descriptor_;
  metadata.reflection = Memory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Memory

// optional .ssa.MemoryX64 memory_x64 = 1;
bool Memory::has_memory_x64() const {
  return content_case() == kMemoryX64;
}
void Memory::set_has_memory_x64() {
  _oneof_case_[0] = kMemoryX64;
}
void Memory::clear_memory_x64() {
  if (has_memory_x64()) {
    delete content_.memory_x64_;
    clear_has_content();
  }
}
 const ::ssa::MemoryX64& Memory::memory_x64() const {
  // @@protoc_insertion_point(field_get:ssa.Memory.memory_x64)
  return has_memory_x64()
      ? *content_.memory_x64_
      : ::ssa::MemoryX64::default_instance();
}
::ssa::MemoryX64* Memory::mutable_memory_x64() {
  if (!has_memory_x64()) {
    clear_content();
    set_has_memory_x64();
    content_.memory_x64_ = new ::ssa::MemoryX64;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Memory.memory_x64)
  return content_.memory_x64_;
}
::ssa::MemoryX64* Memory::release_memory_x64() {
  // @@protoc_insertion_point(field_release:ssa.Memory.memory_x64)
  if (has_memory_x64()) {
    clear_has_content();
    ::ssa::MemoryX64* temp = content_.memory_x64_;
    content_.memory_x64_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Memory::set_allocated_memory_x64(::ssa::MemoryX64* memory_x64) {
  clear_content();
  if (memory_x64) {
    set_has_memory_x64();
    content_.memory_x64_ = memory_x64;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Memory.memory_x64)
}

// optional .ssa.MemoryTricore memory_tricore = 2;
bool Memory::has_memory_tricore() const {
  return content_case() == kMemoryTricore;
}
void Memory::set_has_memory_tricore() {
  _oneof_case_[0] = kMemoryTricore;
}
void Memory::clear_memory_tricore() {
  if (has_memory_tricore()) {
    delete content_.memory_tricore_;
    clear_has_content();
  }
}
 const ::ssa::MemoryTricore& Memory::memory_tricore() const {
  // @@protoc_insertion_point(field_get:ssa.Memory.memory_tricore)
  return has_memory_tricore()
      ? *content_.memory_tricore_
      : ::ssa::MemoryTricore::default_instance();
}
::ssa::MemoryTricore* Memory::mutable_memory_tricore() {
  if (!has_memory_tricore()) {
    clear_content();
    set_has_memory_tricore();
    content_.memory_tricore_ = new ::ssa::MemoryTricore;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Memory.memory_tricore)
  return content_.memory_tricore_;
}
::ssa::MemoryTricore* Memory::release_memory_tricore() {
  // @@protoc_insertion_point(field_release:ssa.Memory.memory_tricore)
  if (has_memory_tricore()) {
    clear_has_content();
    ::ssa::MemoryTricore* temp = content_.memory_tricore_;
    content_.memory_tricore_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Memory::set_allocated_memory_tricore(::ssa::MemoryTricore* memory_tricore) {
  clear_content();
  if (memory_tricore) {
    set_has_memory_tricore();
    content_.memory_tricore_ = memory_tricore;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Memory.memory_tricore)
}

bool Memory::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void Memory::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
Memory::ContentCase Memory::content_case() const {
  return Memory::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CallingConvention::kAddressFieldNumber;
const int CallingConvention::kMnemonicFieldNumber;
const int CallingConvention::kOperandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CallingConvention::CallingConvention()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.CallingConvention)
}

void CallingConvention::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CallingConvention::CallingConvention(const CallingConvention& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.CallingConvention)
}

void CallingConvention::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  mnemonic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CallingConvention::~CallingConvention() {
  // @@protoc_insertion_point(destructor:ssa.CallingConvention)
  SharedDtor();
}

void CallingConvention::SharedDtor() {
  mnemonic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CallingConvention::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallingConvention::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallingConvention_descriptor_;
}

const CallingConvention& CallingConvention::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

CallingConvention* CallingConvention::default_instance_ = NULL;

CallingConvention* CallingConvention::New(::google::protobuf::Arena* arena) const {
  CallingConvention* n = new CallingConvention;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CallingConvention::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.CallingConvention)
  address_ = GOOGLE_ULONGLONG(0);
  mnemonic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operands_.Clear();
}

bool CallingConvention::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.CallingConvention)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 address = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mnemonic;
        break;
      }

      // optional string mnemonic = 2;
      case 2: {
        if (tag == 18) {
         parse_mnemonic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnemonic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mnemonic().data(), this->mnemonic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssa.CallingConvention.mnemonic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operands;
        break;
      }

      // repeated .ssa.Operand operands = 3;
      case 3: {
        if (tag == 26) {
         parse_operands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_operands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_operands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.CallingConvention)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.CallingConvention)
  return false;
#undef DO_
}

void CallingConvention::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.CallingConvention)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->address(), output);
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnemonic().data(), this->mnemonic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssa.CallingConvention.mnemonic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mnemonic(), output);
  }

  // repeated .ssa.Operand operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operands(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.CallingConvention)
}

::google::protobuf::uint8* CallingConvention::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.CallingConvention)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->address(), target);
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnemonic().data(), this->mnemonic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssa.CallingConvention.mnemonic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mnemonic(), target);
  }

  // repeated .ssa.Operand operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->operands(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.CallingConvention)
  return target;
}

int CallingConvention::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.CallingConvention)
  int total_size = 0;

  // optional fixed64 address = 1;
  if (this->address() != 0) {
    total_size += 1 + 8;
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mnemonic());
  }

  // repeated .ssa.Operand operands = 3;
  total_size += 1 * this->operands_size();
  for (int i = 0; i < this->operands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operands(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallingConvention::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.CallingConvention)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CallingConvention* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CallingConvention>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.CallingConvention)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.CallingConvention)
    MergeFrom(*source);
  }
}

void CallingConvention::MergeFrom(const CallingConvention& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.CallingConvention)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  operands_.MergeFrom(from.operands_);
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.mnemonic().size() > 0) {

    mnemonic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnemonic_);
  }
}

void CallingConvention::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.CallingConvention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallingConvention::CopyFrom(const CallingConvention& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.CallingConvention)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallingConvention::IsInitialized() const {

  return true;
}

void CallingConvention::Swap(CallingConvention* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CallingConvention::InternalSwap(CallingConvention* other) {
  std::swap(address_, other->address_);
  mnemonic_.Swap(&other->mnemonic_);
  operands_.UnsafeArenaSwap(&other->operands_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CallingConvention::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallingConvention_descriptor_;
  metadata.reflection = CallingConvention_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CallingConvention

// optional fixed64 address = 1;
void CallingConvention::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CallingConvention::address() const {
  // @@protoc_insertion_point(field_get:ssa.CallingConvention.address)
  return address_;
}
 void CallingConvention::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:ssa.CallingConvention.address)
}

// optional string mnemonic = 2;
void CallingConvention::clear_mnemonic() {
  mnemonic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CallingConvention::mnemonic() const {
  // @@protoc_insertion_point(field_get:ssa.CallingConvention.mnemonic)
  return mnemonic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallingConvention::set_mnemonic(const ::std::string& value) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssa.CallingConvention.mnemonic)
}
 void CallingConvention::set_mnemonic(const char* value) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssa.CallingConvention.mnemonic)
}
 void CallingConvention::set_mnemonic(const char* value, size_t size) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssa.CallingConvention.mnemonic)
}
 ::std::string* CallingConvention::mutable_mnemonic() {
  
  // @@protoc_insertion_point(field_mutable:ssa.CallingConvention.mnemonic)
  return mnemonic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CallingConvention::release_mnemonic() {
  // @@protoc_insertion_point(field_release:ssa.CallingConvention.mnemonic)
  
  return mnemonic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CallingConvention::set_allocated_mnemonic(::std::string* mnemonic) {
  if (mnemonic != NULL) {
    
  } else {
    
  }
  mnemonic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnemonic);
  // @@protoc_insertion_point(field_set_allocated:ssa.CallingConvention.mnemonic)
}

// repeated .ssa.Operand operands = 3;
int CallingConvention::operands_size() const {
  return operands_.size();
}
void CallingConvention::clear_operands() {
  operands_.Clear();
}
const ::ssa::Operand& CallingConvention::operands(int index) const {
  // @@protoc_insertion_point(field_get:ssa.CallingConvention.operands)
  return operands_.Get(index);
}
::ssa::Operand* CallingConvention::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:ssa.CallingConvention.operands)
  return operands_.Mutable(index);
}
::ssa::Operand* CallingConvention::add_operands() {
  // @@protoc_insertion_point(field_add:ssa.CallingConvention.operands)
  return operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::ssa::Operand >*
CallingConvention::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:ssa.CallingConvention.operands)
  return &operands_;
}
const ::google::protobuf::RepeatedPtrField< ::ssa::Operand >&
CallingConvention::operands() const {
  // @@protoc_insertion_point(field_list:ssa.CallingConvention.operands)
  return operands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseInstruction::kAddressFieldNumber;
const int BaseInstruction::kMnemonicFieldNumber;
const int BaseInstruction::kOperandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseInstruction::BaseInstruction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.BaseInstruction)
}

void BaseInstruction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BaseInstruction::BaseInstruction(const BaseInstruction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.BaseInstruction)
}

void BaseInstruction::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  mnemonic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BaseInstruction::~BaseInstruction() {
  // @@protoc_insertion_point(destructor:ssa.BaseInstruction)
  SharedDtor();
}

void BaseInstruction::SharedDtor() {
  mnemonic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BaseInstruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseInstruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseInstruction_descriptor_;
}

const BaseInstruction& BaseInstruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

BaseInstruction* BaseInstruction::default_instance_ = NULL;

BaseInstruction* BaseInstruction::New(::google::protobuf::Arena* arena) const {
  BaseInstruction* n = new BaseInstruction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseInstruction::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.BaseInstruction)
  address_ = GOOGLE_ULONGLONG(0);
  mnemonic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operands_.Clear();
}

bool BaseInstruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.BaseInstruction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 address = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mnemonic;
        break;
      }

      // optional string mnemonic = 2;
      case 2: {
        if (tag == 18) {
         parse_mnemonic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnemonic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mnemonic().data(), this->mnemonic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssa.BaseInstruction.mnemonic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operands;
        break;
      }

      // repeated .ssa.Operand operands = 3;
      case 3: {
        if (tag == 26) {
         parse_operands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_operands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_operands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.BaseInstruction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.BaseInstruction)
  return false;
#undef DO_
}

void BaseInstruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.BaseInstruction)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->address(), output);
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnemonic().data(), this->mnemonic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssa.BaseInstruction.mnemonic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mnemonic(), output);
  }

  // repeated .ssa.Operand operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operands(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.BaseInstruction)
}

::google::protobuf::uint8* BaseInstruction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.BaseInstruction)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->address(), target);
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnemonic().data(), this->mnemonic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssa.BaseInstruction.mnemonic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mnemonic(), target);
  }

  // repeated .ssa.Operand operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->operands(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.BaseInstruction)
  return target;
}

int BaseInstruction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.BaseInstruction)
  int total_size = 0;

  // optional fixed64 address = 1;
  if (this->address() != 0) {
    total_size += 1 + 8;
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mnemonic());
  }

  // repeated .ssa.Operand operands = 3;
  total_size += 1 * this->operands_size();
  for (int i = 0; i < this->operands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operands(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseInstruction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.BaseInstruction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BaseInstruction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseInstruction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.BaseInstruction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.BaseInstruction)
    MergeFrom(*source);
  }
}

void BaseInstruction::MergeFrom(const BaseInstruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.BaseInstruction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  operands_.MergeFrom(from.operands_);
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.mnemonic().size() > 0) {

    mnemonic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnemonic_);
  }
}

void BaseInstruction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.BaseInstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseInstruction::CopyFrom(const BaseInstruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.BaseInstruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseInstruction::IsInitialized() const {

  return true;
}

void BaseInstruction::Swap(BaseInstruction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseInstruction::InternalSwap(BaseInstruction* other) {
  std::swap(address_, other->address_);
  mnemonic_.Swap(&other->mnemonic_);
  operands_.UnsafeArenaSwap(&other->operands_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseInstruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseInstruction_descriptor_;
  metadata.reflection = BaseInstruction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseInstruction

// optional fixed64 address = 1;
void BaseInstruction::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BaseInstruction::address() const {
  // @@protoc_insertion_point(field_get:ssa.BaseInstruction.address)
  return address_;
}
 void BaseInstruction::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:ssa.BaseInstruction.address)
}

// optional string mnemonic = 2;
void BaseInstruction::clear_mnemonic() {
  mnemonic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BaseInstruction::mnemonic() const {
  // @@protoc_insertion_point(field_get:ssa.BaseInstruction.mnemonic)
  return mnemonic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BaseInstruction::set_mnemonic(const ::std::string& value) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssa.BaseInstruction.mnemonic)
}
 void BaseInstruction::set_mnemonic(const char* value) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssa.BaseInstruction.mnemonic)
}
 void BaseInstruction::set_mnemonic(const char* value, size_t size) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssa.BaseInstruction.mnemonic)
}
 ::std::string* BaseInstruction::mutable_mnemonic() {
  
  // @@protoc_insertion_point(field_mutable:ssa.BaseInstruction.mnemonic)
  return mnemonic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BaseInstruction::release_mnemonic() {
  // @@protoc_insertion_point(field_release:ssa.BaseInstruction.mnemonic)
  
  return mnemonic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BaseInstruction::set_allocated_mnemonic(::std::string* mnemonic) {
  if (mnemonic != NULL) {
    
  } else {
    
  }
  mnemonic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnemonic);
  // @@protoc_insertion_point(field_set_allocated:ssa.BaseInstruction.mnemonic)
}

// repeated .ssa.Operand operands = 3;
int BaseInstruction::operands_size() const {
  return operands_.size();
}
void BaseInstruction::clear_operands() {
  operands_.Clear();
}
const ::ssa::Operand& BaseInstruction::operands(int index) const {
  // @@protoc_insertion_point(field_get:ssa.BaseInstruction.operands)
  return operands_.Get(index);
}
::ssa::Operand* BaseInstruction::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:ssa.BaseInstruction.operands)
  return operands_.Mutable(index);
}
::ssa::Operand* BaseInstruction::add_operands() {
  // @@protoc_insertion_point(field_add:ssa.BaseInstruction.operands)
  return operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::ssa::Operand >*
BaseInstruction::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:ssa.BaseInstruction.operands)
  return &operands_;
}
const ::google::protobuf::RepeatedPtrField< ::ssa::Operand >&
BaseInstruction::operands() const {
  // @@protoc_insertion_point(field_list:ssa.BaseInstruction.operands)
  return operands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PhiNode::kAddressFieldNumber;
const int PhiNode::kMnemonicFieldNumber;
const int PhiNode::kOperandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PhiNode::PhiNode()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.PhiNode)
}

void PhiNode::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

PhiNode::PhiNode(const PhiNode& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.PhiNode)
}

void PhiNode::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  mnemonic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

PhiNode::~PhiNode() {
  // @@protoc_insertion_point(destructor:ssa.PhiNode)
  SharedDtor();
}

void PhiNode::SharedDtor() {
  mnemonic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void PhiNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhiNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhiNode_descriptor_;
}

const PhiNode& PhiNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

PhiNode* PhiNode::default_instance_ = NULL;

PhiNode* PhiNode::New(::google::protobuf::Arena* arena) const {
  PhiNode* n = new PhiNode;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PhiNode::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.PhiNode)
  address_ = GOOGLE_ULONGLONG(0);
  mnemonic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  operands_.Clear();
}

bool PhiNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.PhiNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 address = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mnemonic;
        break;
      }

      // optional string mnemonic = 2;
      case 2: {
        if (tag == 18) {
         parse_mnemonic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnemonic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mnemonic().data(), this->mnemonic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ssa.PhiNode.mnemonic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_operands;
        break;
      }

      // repeated .ssa.Operand operands = 3;
      case 3: {
        if (tag == 26) {
         parse_operands:
          DO_(input->IncrementRecursionDepth());
         parse_loop_operands:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_operands()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_operands;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.PhiNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.PhiNode)
  return false;
#undef DO_
}

void PhiNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.PhiNode)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->address(), output);
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnemonic().data(), this->mnemonic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssa.PhiNode.mnemonic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mnemonic(), output);
  }

  // repeated .ssa.Operand operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operands(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.PhiNode)
}

::google::protobuf::uint8* PhiNode::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.PhiNode)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->address(), target);
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mnemonic().data(), this->mnemonic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ssa.PhiNode.mnemonic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mnemonic(), target);
  }

  // repeated .ssa.Operand operands = 3;
  for (unsigned int i = 0, n = this->operands_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->operands(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.PhiNode)
  return target;
}

int PhiNode::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.PhiNode)
  int total_size = 0;

  // optional fixed64 address = 1;
  if (this->address() != 0) {
    total_size += 1 + 8;
  }

  // optional string mnemonic = 2;
  if (this->mnemonic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mnemonic());
  }

  // repeated .ssa.Operand operands = 3;
  total_size += 1 * this->operands_size();
  for (int i = 0; i < this->operands_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operands(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhiNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.PhiNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PhiNode* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PhiNode>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.PhiNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.PhiNode)
    MergeFrom(*source);
  }
}

void PhiNode::MergeFrom(const PhiNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.PhiNode)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  operands_.MergeFrom(from.operands_);
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.mnemonic().size() > 0) {

    mnemonic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mnemonic_);
  }
}

void PhiNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.PhiNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhiNode::CopyFrom(const PhiNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.PhiNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhiNode::IsInitialized() const {

  return true;
}

void PhiNode::Swap(PhiNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PhiNode::InternalSwap(PhiNode* other) {
  std::swap(address_, other->address_);
  mnemonic_.Swap(&other->mnemonic_);
  operands_.UnsafeArenaSwap(&other->operands_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PhiNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhiNode_descriptor_;
  metadata.reflection = PhiNode_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PhiNode

// optional fixed64 address = 1;
void PhiNode::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 PhiNode::address() const {
  // @@protoc_insertion_point(field_get:ssa.PhiNode.address)
  return address_;
}
 void PhiNode::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:ssa.PhiNode.address)
}

// optional string mnemonic = 2;
void PhiNode::clear_mnemonic() {
  mnemonic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& PhiNode::mnemonic() const {
  // @@protoc_insertion_point(field_get:ssa.PhiNode.mnemonic)
  return mnemonic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PhiNode::set_mnemonic(const ::std::string& value) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ssa.PhiNode.mnemonic)
}
 void PhiNode::set_mnemonic(const char* value) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ssa.PhiNode.mnemonic)
}
 void PhiNode::set_mnemonic(const char* value, size_t size) {
  
  mnemonic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ssa.PhiNode.mnemonic)
}
 ::std::string* PhiNode::mutable_mnemonic() {
  
  // @@protoc_insertion_point(field_mutable:ssa.PhiNode.mnemonic)
  return mnemonic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* PhiNode::release_mnemonic() {
  // @@protoc_insertion_point(field_release:ssa.PhiNode.mnemonic)
  
  return mnemonic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void PhiNode::set_allocated_mnemonic(::std::string* mnemonic) {
  if (mnemonic != NULL) {
    
  } else {
    
  }
  mnemonic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mnemonic);
  // @@protoc_insertion_point(field_set_allocated:ssa.PhiNode.mnemonic)
}

// repeated .ssa.Operand operands = 3;
int PhiNode::operands_size() const {
  return operands_.size();
}
void PhiNode::clear_operands() {
  operands_.Clear();
}
const ::ssa::Operand& PhiNode::operands(int index) const {
  // @@protoc_insertion_point(field_get:ssa.PhiNode.operands)
  return operands_.Get(index);
}
::ssa::Operand* PhiNode::mutable_operands(int index) {
  // @@protoc_insertion_point(field_mutable:ssa.PhiNode.operands)
  return operands_.Mutable(index);
}
::ssa::Operand* PhiNode::add_operands() {
  // @@protoc_insertion_point(field_add:ssa.PhiNode.operands)
  return operands_.Add();
}
::google::protobuf::RepeatedPtrField< ::ssa::Operand >*
PhiNode::mutable_operands() {
  // @@protoc_insertion_point(field_mutable_list:ssa.PhiNode.operands)
  return &operands_;
}
const ::google::protobuf::RepeatedPtrField< ::ssa::Operand >&
PhiNode::operands() const {
  // @@protoc_insertion_point(field_list:ssa.PhiNode.operands)
  return operands_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Operand::kRegisterFieldNumber;
const int Operand::kConstantFieldNumber;
const int Operand::kMemoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Operand::Operand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.Operand)
}

void Operand::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Operand_default_oneof_instance_->register__ = const_cast< ::ssa::Register*>(&::ssa::Register::default_instance());
  Operand_default_oneof_instance_->constant_ = const_cast< ::ssa::Constant*>(&::ssa::Constant::default_instance());
  Operand_default_oneof_instance_->memory_ = const_cast< ::ssa::Memory*>(&::ssa::Memory::default_instance());
}

Operand::Operand(const Operand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.Operand)
}

void Operand::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_content();
}

Operand::~Operand() {
  // @@protoc_insertion_point(destructor:ssa.Operand)
  SharedDtor();
}

void Operand::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
  if (this != default_instance_) {
  }
}

void Operand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operand_descriptor_;
}

const Operand& Operand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

Operand* Operand::default_instance_ = NULL;

Operand* Operand::New(::google::protobuf::Arena* arena) const {
  Operand* n = new Operand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Operand::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:ssa.Operand)
  switch(content_case()) {
    case kRegister: {
      delete content_.register__;
      break;
    }
    case kConstant: {
      delete content_.constant_;
      break;
    }
    case kMemory: {
      delete content_.memory_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Operand::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.Operand)
  clear_content();
}

bool Operand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.Operand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssa.Register register = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_register_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_constant;
        break;
      }

      // optional .ssa.Constant constant = 2;
      case 2: {
        if (tag == 18) {
         parse_constant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_constant()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_memory;
        break;
      }

      // optional .ssa.Memory memory = 3;
      case 3: {
        if (tag == 26) {
         parse_memory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.Operand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.Operand)
  return false;
#undef DO_
}

void Operand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.Operand)
  // optional .ssa.Register register = 1;
  if (has_register_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *content_.register__, output);
  }

  // optional .ssa.Constant constant = 2;
  if (has_constant()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *content_.constant_, output);
  }

  // optional .ssa.Memory memory = 3;
  if (has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *content_.memory_, output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.Operand)
}

::google::protobuf::uint8* Operand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.Operand)
  // optional .ssa.Register register = 1;
  if (has_register_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *content_.register__, false, target);
  }

  // optional .ssa.Constant constant = 2;
  if (has_constant()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *content_.constant_, false, target);
  }

  // optional .ssa.Memory memory = 3;
  if (has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *content_.memory_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.Operand)
  return target;
}

int Operand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.Operand)
  int total_size = 0;

  switch (content_case()) {
    // optional .ssa.Register register = 1;
    case kRegister: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.register__);
      break;
    }
    // optional .ssa.Constant constant = 2;
    case kConstant: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.constant_);
      break;
    }
    // optional .ssa.Memory memory = 3;
    case kMemory: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.memory_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.Operand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Operand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Operand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.Operand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.Operand)
    MergeFrom(*source);
  }
}

void Operand::MergeFrom(const Operand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.Operand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.content_case()) {
    case kRegister: {
      mutable_register_()->::ssa::Register::MergeFrom(from.register_());
      break;
    }
    case kConstant: {
      mutable_constant()->::ssa::Constant::MergeFrom(from.constant());
      break;
    }
    case kMemory: {
      mutable_memory()->::ssa::Memory::MergeFrom(from.memory());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Operand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.Operand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operand::CopyFrom(const Operand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.Operand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operand::IsInitialized() const {

  return true;
}

void Operand::Swap(Operand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Operand::InternalSwap(Operand* other) {
  std::swap(content_, other->content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Operand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operand_descriptor_;
  metadata.reflection = Operand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Operand

// optional .ssa.Register register = 1;
bool Operand::has_register_() const {
  return content_case() == kRegister;
}
void Operand::set_has_register_() {
  _oneof_case_[0] = kRegister;
}
void Operand::clear_register_() {
  if (has_register_()) {
    delete content_.register__;
    clear_has_content();
  }
}
 const ::ssa::Register& Operand::register_() const {
  // @@protoc_insertion_point(field_get:ssa.Operand.register)
  return has_register_()
      ? *content_.register__
      : ::ssa::Register::default_instance();
}
::ssa::Register* Operand::mutable_register_() {
  if (!has_register_()) {
    clear_content();
    set_has_register_();
    content_.register__ = new ::ssa::Register;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Operand.register)
  return content_.register__;
}
::ssa::Register* Operand::release_register_() {
  // @@protoc_insertion_point(field_release:ssa.Operand.register)
  if (has_register_()) {
    clear_has_content();
    ::ssa::Register* temp = content_.register__;
    content_.register__ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Operand::set_allocated_register_(::ssa::Register* register_) {
  clear_content();
  if (register_) {
    set_has_register_();
    content_.register__ = register_;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Operand.register)
}

// optional .ssa.Constant constant = 2;
bool Operand::has_constant() const {
  return content_case() == kConstant;
}
void Operand::set_has_constant() {
  _oneof_case_[0] = kConstant;
}
void Operand::clear_constant() {
  if (has_constant()) {
    delete content_.constant_;
    clear_has_content();
  }
}
 const ::ssa::Constant& Operand::constant() const {
  // @@protoc_insertion_point(field_get:ssa.Operand.constant)
  return has_constant()
      ? *content_.constant_
      : ::ssa::Constant::default_instance();
}
::ssa::Constant* Operand::mutable_constant() {
  if (!has_constant()) {
    clear_content();
    set_has_constant();
    content_.constant_ = new ::ssa::Constant;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Operand.constant)
  return content_.constant_;
}
::ssa::Constant* Operand::release_constant() {
  // @@protoc_insertion_point(field_release:ssa.Operand.constant)
  if (has_constant()) {
    clear_has_content();
    ::ssa::Constant* temp = content_.constant_;
    content_.constant_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Operand::set_allocated_constant(::ssa::Constant* constant) {
  clear_content();
  if (constant) {
    set_has_constant();
    content_.constant_ = constant;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Operand.constant)
}

// optional .ssa.Memory memory = 3;
bool Operand::has_memory() const {
  return content_case() == kMemory;
}
void Operand::set_has_memory() {
  _oneof_case_[0] = kMemory;
}
void Operand::clear_memory() {
  if (has_memory()) {
    delete content_.memory_;
    clear_has_content();
  }
}
 const ::ssa::Memory& Operand::memory() const {
  // @@protoc_insertion_point(field_get:ssa.Operand.memory)
  return has_memory()
      ? *content_.memory_
      : ::ssa::Memory::default_instance();
}
::ssa::Memory* Operand::mutable_memory() {
  if (!has_memory()) {
    clear_content();
    set_has_memory();
    content_.memory_ = new ::ssa::Memory;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Operand.memory)
  return content_.memory_;
}
::ssa::Memory* Operand::release_memory() {
  // @@protoc_insertion_point(field_release:ssa.Operand.memory)
  if (has_memory()) {
    clear_has_content();
    ::ssa::Memory* temp = content_.memory_;
    content_.memory_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Operand::set_allocated_memory(::ssa::Memory* memory) {
  clear_content();
  if (memory) {
    set_has_memory();
    content_.memory_ = memory;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Operand.memory)
}

bool Operand::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void Operand::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
Operand::ContentCase Operand::content_case() const {
  return Operand::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Instruction::kCallingConventionFieldNumber;
const int Instruction::kInstructionFieldNumber;
const int Instruction::kPhiNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Instruction::Instruction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.Instruction)
}

void Instruction::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  Instruction_default_oneof_instance_->calling_convention_ = const_cast< ::ssa::CallingConvention*>(&::ssa::CallingConvention::default_instance());
  Instruction_default_oneof_instance_->instruction_ = const_cast< ::ssa::BaseInstruction*>(&::ssa::BaseInstruction::default_instance());
  Instruction_default_oneof_instance_->phi_node_ = const_cast< ::ssa::PhiNode*>(&::ssa::PhiNode::default_instance());
}

Instruction::Instruction(const Instruction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.Instruction)
}

void Instruction::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_content();
}

Instruction::~Instruction() {
  // @@protoc_insertion_point(destructor:ssa.Instruction)
  SharedDtor();
}

void Instruction::SharedDtor() {
  if (has_content()) {
    clear_content();
  }
  if (this != default_instance_) {
  }
}

void Instruction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instruction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instruction_descriptor_;
}

const Instruction& Instruction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

Instruction* Instruction::default_instance_ = NULL;

Instruction* Instruction::New(::google::protobuf::Arena* arena) const {
  Instruction* n = new Instruction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Instruction::clear_content() {
// @@protoc_insertion_point(one_of_clear_start:ssa.Instruction)
  switch(content_case()) {
    case kCallingConvention: {
      delete content_.calling_convention_;
      break;
    }
    case kInstruction: {
      delete content_.instruction_;
      break;
    }
    case kPhiNode: {
      delete content_.phi_node_;
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Instruction::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.Instruction)
  clear_content();
}

bool Instruction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.Instruction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ssa.CallingConvention calling_convention = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_calling_convention()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_instruction;
        break;
      }

      // optional .ssa.BaseInstruction instruction = 2;
      case 2: {
        if (tag == 18) {
         parse_instruction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instruction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_phi_node;
        break;
      }

      // optional .ssa.PhiNode phi_node = 3;
      case 3: {
        if (tag == 26) {
         parse_phi_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_phi_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.Instruction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.Instruction)
  return false;
#undef DO_
}

void Instruction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.Instruction)
  // optional .ssa.CallingConvention calling_convention = 1;
  if (has_calling_convention()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *content_.calling_convention_, output);
  }

  // optional .ssa.BaseInstruction instruction = 2;
  if (has_instruction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *content_.instruction_, output);
  }

  // optional .ssa.PhiNode phi_node = 3;
  if (has_phi_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *content_.phi_node_, output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.Instruction)
}

::google::protobuf::uint8* Instruction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.Instruction)
  // optional .ssa.CallingConvention calling_convention = 1;
  if (has_calling_convention()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *content_.calling_convention_, false, target);
  }

  // optional .ssa.BaseInstruction instruction = 2;
  if (has_instruction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *content_.instruction_, false, target);
  }

  // optional .ssa.PhiNode phi_node = 3;
  if (has_phi_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *content_.phi_node_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.Instruction)
  return target;
}

int Instruction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.Instruction)
  int total_size = 0;

  switch (content_case()) {
    // optional .ssa.CallingConvention calling_convention = 1;
    case kCallingConvention: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.calling_convention_);
      break;
    }
    // optional .ssa.BaseInstruction instruction = 2;
    case kInstruction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.instruction_);
      break;
    }
    // optional .ssa.PhiNode phi_node = 3;
    case kPhiNode: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *content_.phi_node_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instruction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.Instruction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Instruction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Instruction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.Instruction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.Instruction)
    MergeFrom(*source);
  }
}

void Instruction::MergeFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.Instruction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.content_case()) {
    case kCallingConvention: {
      mutable_calling_convention()->::ssa::CallingConvention::MergeFrom(from.calling_convention());
      break;
    }
    case kInstruction: {
      mutable_instruction()->::ssa::BaseInstruction::MergeFrom(from.instruction());
      break;
    }
    case kPhiNode: {
      mutable_phi_node()->::ssa::PhiNode::MergeFrom(from.phi_node());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
}

void Instruction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instruction::CopyFrom(const Instruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.Instruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instruction::IsInitialized() const {

  return true;
}

void Instruction::Swap(Instruction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Instruction::InternalSwap(Instruction* other) {
  std::swap(content_, other->content_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Instruction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instruction_descriptor_;
  metadata.reflection = Instruction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Instruction

// optional .ssa.CallingConvention calling_convention = 1;
bool Instruction::has_calling_convention() const {
  return content_case() == kCallingConvention;
}
void Instruction::set_has_calling_convention() {
  _oneof_case_[0] = kCallingConvention;
}
void Instruction::clear_calling_convention() {
  if (has_calling_convention()) {
    delete content_.calling_convention_;
    clear_has_content();
  }
}
 const ::ssa::CallingConvention& Instruction::calling_convention() const {
  // @@protoc_insertion_point(field_get:ssa.Instruction.calling_convention)
  return has_calling_convention()
      ? *content_.calling_convention_
      : ::ssa::CallingConvention::default_instance();
}
::ssa::CallingConvention* Instruction::mutable_calling_convention() {
  if (!has_calling_convention()) {
    clear_content();
    set_has_calling_convention();
    content_.calling_convention_ = new ::ssa::CallingConvention;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Instruction.calling_convention)
  return content_.calling_convention_;
}
::ssa::CallingConvention* Instruction::release_calling_convention() {
  // @@protoc_insertion_point(field_release:ssa.Instruction.calling_convention)
  if (has_calling_convention()) {
    clear_has_content();
    ::ssa::CallingConvention* temp = content_.calling_convention_;
    content_.calling_convention_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Instruction::set_allocated_calling_convention(::ssa::CallingConvention* calling_convention) {
  clear_content();
  if (calling_convention) {
    set_has_calling_convention();
    content_.calling_convention_ = calling_convention;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Instruction.calling_convention)
}

// optional .ssa.BaseInstruction instruction = 2;
bool Instruction::has_instruction() const {
  return content_case() == kInstruction;
}
void Instruction::set_has_instruction() {
  _oneof_case_[0] = kInstruction;
}
void Instruction::clear_instruction() {
  if (has_instruction()) {
    delete content_.instruction_;
    clear_has_content();
  }
}
 const ::ssa::BaseInstruction& Instruction::instruction() const {
  // @@protoc_insertion_point(field_get:ssa.Instruction.instruction)
  return has_instruction()
      ? *content_.instruction_
      : ::ssa::BaseInstruction::default_instance();
}
::ssa::BaseInstruction* Instruction::mutable_instruction() {
  if (!has_instruction()) {
    clear_content();
    set_has_instruction();
    content_.instruction_ = new ::ssa::BaseInstruction;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Instruction.instruction)
  return content_.instruction_;
}
::ssa::BaseInstruction* Instruction::release_instruction() {
  // @@protoc_insertion_point(field_release:ssa.Instruction.instruction)
  if (has_instruction()) {
    clear_has_content();
    ::ssa::BaseInstruction* temp = content_.instruction_;
    content_.instruction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Instruction::set_allocated_instruction(::ssa::BaseInstruction* instruction) {
  clear_content();
  if (instruction) {
    set_has_instruction();
    content_.instruction_ = instruction;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Instruction.instruction)
}

// optional .ssa.PhiNode phi_node = 3;
bool Instruction::has_phi_node() const {
  return content_case() == kPhiNode;
}
void Instruction::set_has_phi_node() {
  _oneof_case_[0] = kPhiNode;
}
void Instruction::clear_phi_node() {
  if (has_phi_node()) {
    delete content_.phi_node_;
    clear_has_content();
  }
}
 const ::ssa::PhiNode& Instruction::phi_node() const {
  // @@protoc_insertion_point(field_get:ssa.Instruction.phi_node)
  return has_phi_node()
      ? *content_.phi_node_
      : ::ssa::PhiNode::default_instance();
}
::ssa::PhiNode* Instruction::mutable_phi_node() {
  if (!has_phi_node()) {
    clear_content();
    set_has_phi_node();
    content_.phi_node_ = new ::ssa::PhiNode;
  }
  // @@protoc_insertion_point(field_mutable:ssa.Instruction.phi_node)
  return content_.phi_node_;
}
::ssa::PhiNode* Instruction::release_phi_node() {
  // @@protoc_insertion_point(field_release:ssa.Instruction.phi_node)
  if (has_phi_node()) {
    clear_has_content();
    ::ssa::PhiNode* temp = content_.phi_node_;
    content_.phi_node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Instruction::set_allocated_phi_node(::ssa::PhiNode* phi_node) {
  clear_content();
  if (phi_node) {
    set_has_phi_node();
    content_.phi_node_ = phi_node;
  }
  // @@protoc_insertion_point(field_set_allocated:ssa.Instruction.phi_node)
}

bool Instruction::has_content() const {
  return content_case() != CONTENT_NOT_SET;
}
void Instruction::clear_has_content() {
  _oneof_case_[0] = CONTENT_NOT_SET;
}
Instruction::ContentCase Instruction::content_case() const {
  return Instruction::ContentCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BasicBlock::kAddressFieldNumber;
const int BasicBlock::kEndFieldNumber;
const int BasicBlock::kInstructionsFieldNumber;
const int BasicBlock::kPredecessorsFieldNumber;
const int BasicBlock::kSuccessorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BasicBlock::BasicBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.BasicBlock)
}

void BasicBlock::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BasicBlock::BasicBlock(const BasicBlock& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.BasicBlock)
}

void BasicBlock::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
}

BasicBlock::~BasicBlock() {
  // @@protoc_insertion_point(destructor:ssa.BasicBlock)
  SharedDtor();
}

void BasicBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BasicBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BasicBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BasicBlock_descriptor_;
}

const BasicBlock& BasicBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

BasicBlock* BasicBlock::default_instance_ = NULL;

BasicBlock* BasicBlock::New(::google::protobuf::Arena* arena) const {
  BasicBlock* n = new BasicBlock;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BasicBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.BasicBlock)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BasicBlock, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BasicBlock*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(address_, end_);

#undef ZR_HELPER_
#undef ZR_

  instructions_.Clear();
  predecessors_.Clear();
  successors_.Clear();
}

bool BasicBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.BasicBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 address = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_end;
        break;
      }

      // optional fixed64 end = 2;
      case 2: {
        if (tag == 17) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &end_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_instructions;
        break;
      }

      // repeated .ssa.Instruction instructions = 3;
      case 3: {
        if (tag == 26) {
         parse_instructions:
          DO_(input->IncrementRecursionDepth());
         parse_loop_instructions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_instructions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_instructions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_predecessors;
        break;
      }

      // repeated fixed64 predecessors = 4;
      case 4: {
        if (tag == 34) {
         parse_predecessors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_predecessors())));
        } else if (tag == 33) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 34, input, this->mutable_predecessors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_successors;
        break;
      }

      // repeated fixed64 successors = 5;
      case 5: {
        if (tag == 42) {
         parse_successors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_successors())));
        } else if (tag == 41) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 42, input, this->mutable_successors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.BasicBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.BasicBlock)
  return false;
#undef DO_
}

void BasicBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.BasicBlock)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->address(), output);
  }

  // optional fixed64 end = 2;
  if (this->end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->end(), output);
  }

  // repeated .ssa.Instruction instructions = 3;
  for (unsigned int i = 0, n = this->instructions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->instructions(i), output);
  }

  // repeated fixed64 predecessors = 4;
  if (this->predecessors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_predecessors_cached_byte_size_);
  }
  for (int i = 0; i < this->predecessors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64NoTag(
      this->predecessors(i), output);
  }

  // repeated fixed64 successors = 5;
  if (this->successors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_successors_cached_byte_size_);
  }
  for (int i = 0; i < this->successors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64NoTag(
      this->successors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.BasicBlock)
}

::google::protobuf::uint8* BasicBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.BasicBlock)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->address(), target);
  }

  // optional fixed64 end = 2;
  if (this->end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->end(), target);
  }

  // repeated .ssa.Instruction instructions = 3;
  for (unsigned int i = 0, n = this->instructions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->instructions(i), false, target);
  }

  // repeated fixed64 predecessors = 4;
  if (this->predecessors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _predecessors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->predecessors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->predecessors(i), target);
  }

  // repeated fixed64 successors = 5;
  if (this->successors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _successors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->successors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->successors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.BasicBlock)
  return target;
}

int BasicBlock::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.BasicBlock)
  int total_size = 0;

  // optional fixed64 address = 1;
  if (this->address() != 0) {
    total_size += 1 + 8;
  }

  // optional fixed64 end = 2;
  if (this->end() != 0) {
    total_size += 1 + 8;
  }

  // repeated .ssa.Instruction instructions = 3;
  total_size += 1 * this->instructions_size();
  for (int i = 0; i < this->instructions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instructions(i));
  }

  // repeated fixed64 predecessors = 4;
  {
    int data_size = 0;
    data_size = 8 * this->predecessors_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _predecessors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed64 successors = 5;
  {
    int data_size = 0;
    data_size = 8 * this->successors_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _successors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BasicBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.BasicBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BasicBlock* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BasicBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.BasicBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.BasicBlock)
    MergeFrom(*source);
  }
}

void BasicBlock::MergeFrom(const BasicBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.BasicBlock)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  instructions_.MergeFrom(from.instructions_);
  predecessors_.MergeFrom(from.predecessors_);
  successors_.MergeFrom(from.successors_);
  if (from.address() != 0) {
    set_address(from.address());
  }
  if (from.end() != 0) {
    set_end(from.end());
  }
}

void BasicBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.BasicBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicBlock::CopyFrom(const BasicBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.BasicBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicBlock::IsInitialized() const {

  return true;
}

void BasicBlock::Swap(BasicBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BasicBlock::InternalSwap(BasicBlock* other) {
  std::swap(address_, other->address_);
  std::swap(end_, other->end_);
  instructions_.UnsafeArenaSwap(&other->instructions_);
  predecessors_.UnsafeArenaSwap(&other->predecessors_);
  successors_.UnsafeArenaSwap(&other->successors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BasicBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BasicBlock_descriptor_;
  metadata.reflection = BasicBlock_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BasicBlock

// optional fixed64 address = 1;
void BasicBlock::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BasicBlock::address() const {
  // @@protoc_insertion_point(field_get:ssa.BasicBlock.address)
  return address_;
}
 void BasicBlock::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:ssa.BasicBlock.address)
}

// optional fixed64 end = 2;
void BasicBlock::clear_end() {
  end_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 BasicBlock::end() const {
  // @@protoc_insertion_point(field_get:ssa.BasicBlock.end)
  return end_;
}
 void BasicBlock::set_end(::google::protobuf::uint64 value) {
  
  end_ = value;
  // @@protoc_insertion_point(field_set:ssa.BasicBlock.end)
}

// repeated .ssa.Instruction instructions = 3;
int BasicBlock::instructions_size() const {
  return instructions_.size();
}
void BasicBlock::clear_instructions() {
  instructions_.Clear();
}
const ::ssa::Instruction& BasicBlock::instructions(int index) const {
  // @@protoc_insertion_point(field_get:ssa.BasicBlock.instructions)
  return instructions_.Get(index);
}
::ssa::Instruction* BasicBlock::mutable_instructions(int index) {
  // @@protoc_insertion_point(field_mutable:ssa.BasicBlock.instructions)
  return instructions_.Mutable(index);
}
::ssa::Instruction* BasicBlock::add_instructions() {
  // @@protoc_insertion_point(field_add:ssa.BasicBlock.instructions)
  return instructions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ssa::Instruction >*
BasicBlock::mutable_instructions() {
  // @@protoc_insertion_point(field_mutable_list:ssa.BasicBlock.instructions)
  return &instructions_;
}
const ::google::protobuf::RepeatedPtrField< ::ssa::Instruction >&
BasicBlock::instructions() const {
  // @@protoc_insertion_point(field_list:ssa.BasicBlock.instructions)
  return instructions_;
}

// repeated fixed64 predecessors = 4;
int BasicBlock::predecessors_size() const {
  return predecessors_.size();
}
void BasicBlock::clear_predecessors() {
  predecessors_.Clear();
}
 ::google::protobuf::uint64 BasicBlock::predecessors(int index) const {
  // @@protoc_insertion_point(field_get:ssa.BasicBlock.predecessors)
  return predecessors_.Get(index);
}
 void BasicBlock::set_predecessors(int index, ::google::protobuf::uint64 value) {
  predecessors_.Set(index, value);
  // @@protoc_insertion_point(field_set:ssa.BasicBlock.predecessors)
}
 void BasicBlock::add_predecessors(::google::protobuf::uint64 value) {
  predecessors_.Add(value);
  // @@protoc_insertion_point(field_add:ssa.BasicBlock.predecessors)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BasicBlock::predecessors() const {
  // @@protoc_insertion_point(field_list:ssa.BasicBlock.predecessors)
  return predecessors_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BasicBlock::mutable_predecessors() {
  // @@protoc_insertion_point(field_mutable_list:ssa.BasicBlock.predecessors)
  return &predecessors_;
}

// repeated fixed64 successors = 5;
int BasicBlock::successors_size() const {
  return successors_.size();
}
void BasicBlock::clear_successors() {
  successors_.Clear();
}
 ::google::protobuf::uint64 BasicBlock::successors(int index) const {
  // @@protoc_insertion_point(field_get:ssa.BasicBlock.successors)
  return successors_.Get(index);
}
 void BasicBlock::set_successors(int index, ::google::protobuf::uint64 value) {
  successors_.Set(index, value);
  // @@protoc_insertion_point(field_set:ssa.BasicBlock.successors)
}
 void BasicBlock::add_successors(::google::protobuf::uint64 value) {
  successors_.Add(value);
  // @@protoc_insertion_point(field_add:ssa.BasicBlock.successors)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BasicBlock::successors() const {
  // @@protoc_insertion_point(field_list:ssa.BasicBlock.successors)
  return successors_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BasicBlock::mutable_successors() {
  // @@protoc_insertion_point(field_mutable_list:ssa.BasicBlock.successors)
  return &successors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Function::kAddressFieldNumber;
const int Function::kBasicBlocksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Function::Function()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.Function)
}

void Function::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Function::Function(const Function& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.Function)
}

void Function::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  address_ = GOOGLE_ULONGLONG(0);
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:ssa.Function)
  SharedDtor();
}

void Function::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Function_descriptor_;
}

const Function& Function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

Function* Function::default_instance_ = NULL;

Function* Function::New(::google::protobuf::Arena* arena) const {
  Function* n = new Function;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Function::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.Function)
  address_ = GOOGLE_ULONGLONG(0);
  basic_blocks_.Clear();
}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.Function)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 address = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &address_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_basic_blocks;
        break;
      }

      // repeated .ssa.BasicBlock basic_blocks = 2;
      case 2: {
        if (tag == 18) {
         parse_basic_blocks:
          DO_(input->IncrementRecursionDepth());
         parse_loop_basic_blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_basic_blocks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_basic_blocks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.Function)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.Function)
  return false;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.Function)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->address(), output);
  }

  // repeated .ssa.BasicBlock basic_blocks = 2;
  for (unsigned int i = 0, n = this->basic_blocks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->basic_blocks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.Function)
}

::google::protobuf::uint8* Function::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.Function)
  // optional fixed64 address = 1;
  if (this->address() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->address(), target);
  }

  // repeated .ssa.BasicBlock basic_blocks = 2;
  for (unsigned int i = 0, n = this->basic_blocks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->basic_blocks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.Function)
  return target;
}

int Function::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.Function)
  int total_size = 0;

  // optional fixed64 address = 1;
  if (this->address() != 0) {
    total_size += 1 + 8;
  }

  // repeated .ssa.BasicBlock basic_blocks = 2;
  total_size += 1 * this->basic_blocks_size();
  for (int i = 0; i < this->basic_blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basic_blocks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.Function)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Function* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Function>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.Function)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.Function)
    MergeFrom(*source);
  }
}

void Function::MergeFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.Function)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  basic_blocks_.MergeFrom(from.basic_blocks_);
  if (from.address() != 0) {
    set_address(from.address());
  }
}

void Function::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function::CopyFrom(const Function& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.Function)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {

  return true;
}

void Function::Swap(Function* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Function::InternalSwap(Function* other) {
  std::swap(address_, other->address_);
  basic_blocks_.UnsafeArenaSwap(&other->basic_blocks_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Function_descriptor_;
  metadata.reflection = Function_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Function

// optional fixed64 address = 1;
void Function::clear_address() {
  address_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Function::address() const {
  // @@protoc_insertion_point(field_get:ssa.Function.address)
  return address_;
}
 void Function::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:ssa.Function.address)
}

// repeated .ssa.BasicBlock basic_blocks = 2;
int Function::basic_blocks_size() const {
  return basic_blocks_.size();
}
void Function::clear_basic_blocks() {
  basic_blocks_.Clear();
}
const ::ssa::BasicBlock& Function::basic_blocks(int index) const {
  // @@protoc_insertion_point(field_get:ssa.Function.basic_blocks)
  return basic_blocks_.Get(index);
}
::ssa::BasicBlock* Function::mutable_basic_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:ssa.Function.basic_blocks)
  return basic_blocks_.Mutable(index);
}
::ssa::BasicBlock* Function::add_basic_blocks() {
  // @@protoc_insertion_point(field_add:ssa.Function.basic_blocks)
  return basic_blocks_.Add();
}
::google::protobuf::RepeatedPtrField< ::ssa::BasicBlock >*
Function::mutable_basic_blocks() {
  // @@protoc_insertion_point(field_mutable_list:ssa.Function.basic_blocks)
  return &basic_blocks_;
}
const ::google::protobuf::RepeatedPtrField< ::ssa::BasicBlock >&
Function::basic_blocks() const {
  // @@protoc_insertion_point(field_list:ssa.Function.basic_blocks)
  return basic_blocks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Functions::kFunctionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Functions::Functions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ssa.Functions)
}

void Functions::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Functions::Functions(const Functions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ssa.Functions)
}

void Functions::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Functions::~Functions() {
  // @@protoc_insertion_point(destructor:ssa.Functions)
  SharedDtor();
}

void Functions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Functions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Functions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Functions_descriptor_;
}

const Functions& Functions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ssa_5fexport_2eproto();
  return *default_instance_;
}

Functions* Functions::default_instance_ = NULL;

Functions* Functions::New(::google::protobuf::Arena* arena) const {
  Functions* n = new Functions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Functions::Clear() {
// @@protoc_insertion_point(message_clear_start:ssa.Functions)
  functions_.Clear();
}

bool Functions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ssa.Functions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ssa.Function functions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_functions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_functions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ssa.Functions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ssa.Functions)
  return false;
#undef DO_
}

void Functions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ssa.Functions)
  // repeated .ssa.Function functions = 1;
  for (unsigned int i = 0, n = this->functions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->functions(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ssa.Functions)
}

::google::protobuf::uint8* Functions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ssa.Functions)
  // repeated .ssa.Function functions = 1;
  for (unsigned int i = 0, n = this->functions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->functions(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ssa.Functions)
  return target;
}

int Functions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ssa.Functions)
  int total_size = 0;

  // repeated .ssa.Function functions = 1;
  total_size += 1 * this->functions_size();
  for (int i = 0; i < this->functions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Functions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ssa.Functions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Functions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Functions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ssa.Functions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ssa.Functions)
    MergeFrom(*source);
  }
}

void Functions::MergeFrom(const Functions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ssa.Functions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  functions_.MergeFrom(from.functions_);
}

void Functions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ssa.Functions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Functions::CopyFrom(const Functions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ssa.Functions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Functions::IsInitialized() const {

  return true;
}

void Functions::Swap(Functions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Functions::InternalSwap(Functions* other) {
  functions_.UnsafeArenaSwap(&other->functions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Functions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Functions_descriptor_;
  metadata.reflection = Functions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Functions

// repeated .ssa.Function functions = 1;
int Functions::functions_size() const {
  return functions_.size();
}
void Functions::clear_functions() {
  functions_.Clear();
}
const ::ssa::Function& Functions::functions(int index) const {
  // @@protoc_insertion_point(field_get:ssa.Functions.functions)
  return functions_.Get(index);
}
::ssa::Function* Functions::mutable_functions(int index) {
  // @@protoc_insertion_point(field_mutable:ssa.Functions.functions)
  return functions_.Mutable(index);
}
::ssa::Function* Functions::add_functions() {
  // @@protoc_insertion_point(field_add:ssa.Functions.functions)
  return functions_.Add();
}
::google::protobuf::RepeatedPtrField< ::ssa::Function >*
Functions::mutable_functions() {
  // @@protoc_insertion_point(field_mutable_list:ssa.Functions.functions)
  return &functions_;
}
const ::google::protobuf::RepeatedPtrField< ::ssa::Function >&
Functions::functions() const {
  // @@protoc_insertion_point(field_list:ssa.Functions.functions)
  return functions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ssa

// @@protoc_insertion_point(global_scope)
