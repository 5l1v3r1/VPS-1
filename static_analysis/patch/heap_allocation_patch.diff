diff --git a/VEX/priv/ir_defs.c b/VEX/priv/ir_defs.c
index a853c2e..272431b 100644
--- a/VEX/priv/ir_defs.c
+++ b/VEX/priv/ir_defs.c
@@ -1695,6 +1695,8 @@ void ppIRSB ( const IRSB* bb )
 /*--- Constructors                                            ---*/
 /*---------------------------------------------------------------*/
 
+Bool _allocate_on_heap = 0;
+
 
 /* Constructors -- IRConst */
 
@@ -2511,6 +2513,18 @@ IRTypeEnv* deepCopyIRTypeEnv ( const IRTypeEnv* src )
    return dst;
 }
 
+IRSB* deepCopyIRSB_Heap ( const IRSB* bb )
+{
+   IRSB *bb2;
+   Bool previous = _allocate_on_heap;
+
+   _allocate_on_heap = 1;
+   bb2 = deepCopyIRSB(bb);
+
+   _allocate_on_heap = previous;
+   return bb2;
+}
+
 IRSB* deepCopyIRSB ( const IRSB* bb )
 {
    Int      i;
diff --git a/VEX/priv/main_main.c b/VEX/priv/main_main.c
index 7c125ce..45f5bd3 100644
--- a/VEX/priv/main_main.c
+++ b/VEX/priv/main_main.c
@@ -293,6 +293,22 @@ void LibVEX_Init (
    vexSetAllocMode ( VexAllocModeTEMP );
 }
 
+void LibVEX_Update_Control(const VexControl *vcon)
+{
+   vassert(vcon->iropt_verbosity >= 0);
+   vassert(vcon->iropt_level >= 0);
+   vassert(vcon->iropt_level <= 2);
+   vassert(vcon->iropt_unroll_thresh >= 0);
+   vassert(vcon->iropt_unroll_thresh <= 400);
+   vassert(vcon->guest_max_insns >= 1);
+   vassert(vcon->guest_max_insns <= 100);
+   vassert(vcon->guest_chase_thresh >= 0);
+   vassert(vcon->guest_chase_thresh < vcon->guest_max_insns);
+   vassert(vcon->guest_chase_cond == True
+           || vcon->guest_chase_cond == False);
+
+   vex_control            = *vcon;
+}
 
 /* --------- Make a translation. --------- */
 
diff --git a/VEX/priv/main_util.c b/VEX/priv/main_util.c
index 4e0494b..196421e 100644
--- a/VEX/priv/main_util.c
+++ b/VEX/priv/main_util.c
@@ -39,6 +39,74 @@
 #include "main_globals.h"
 #include "main_util.h"
 
+#include <stdlib.h>
+
+extern Bool _allocate_on_heap;
+
+typedef void (*AllocationListener)( void*, void* );
+
+void vexInitialListener ( void*, void* );
+void vexInitialListener( void *userdata, void *data )
+{
+   return;
+}
+
+void *             _global_listener_data  = NULL;
+AllocationListener _global_listener_func  = &vexInitialListener;
+
+void LibVEX_registerAllocationListener ( void *userdata, AllocationListener listener )
+{
+   _global_listener_data = userdata;
+   _global_listener_func = listener;
+}
+
+void* LibVEX_Alloc_inline ( SizeT nbytes )
+{
+   struct align {
+      char c;
+      union {
+         char c;
+         short s;
+         int i;
+         long l;
+         long long ll;
+         float f;
+         double d;
+         /* long double is currently not used and would increase alignment
+            unnecessarily. */
+         /* long double ld; */
+         void *pto;
+         void (*ptf)(void);
+      } x;
+   };
+
+   /* Make sure the compiler does no surprise us */
+   vassert(offsetof(struct align,x) <= REQ_ALIGN);
+
+   if(_allocate_on_heap) {
+      void *data = malloc(nbytes);
+
+      _global_listener_func(_global_listener_data, data);
+      return data;
+   }
+
+#if 0
+  /* Nasty debugging hack, do not use. */
+  return malloc(nbytes);
+#else
+   HChar* curr;
+   HChar* next;
+   SizeT  ALIGN;
+   ALIGN  = offsetof(struct align,x) - 1;
+   nbytes = (nbytes + ALIGN) & ~ALIGN;
+   curr   = private_LibVEX_alloc_curr;
+   next   = curr + nbytes;
+   if (next >= private_LibVEX_alloc_last)
+      private_LibVEX_alloc_OOM();
+   private_LibVEX_alloc_curr = next;
+   return curr;
+#endif
+}
 
 /*---------------------------------------------------------*/
 /*--- Storage                                           ---*/
@@ -75,6 +143,7 @@ HChar* private_LibVEX_alloc_last  = &temporary[N_TEMPORARY_BYTES-1];
 
 static VexAllocMode mode = VexAllocModeTEMP;
 
+
 void vexAllocSanityCheck ( void )
 {
    vassert(temporary_first == &temporary[0]);
diff --git a/VEX/priv/main_util.h b/VEX/priv/main_util.h
index 8627d1f..2273c1d 100644
--- a/VEX/priv/main_util.h
+++ b/VEX/priv/main_util.h
@@ -129,46 +129,7 @@ extern void   private_LibVEX_alloc_OOM(void) __attribute__((noreturn));
    boundary. */
 #define REQ_ALIGN 8
 
-static inline void* LibVEX_Alloc_inline ( SizeT nbytes )
-{
-   struct align {
-      char c;
-      union {
-         char c;
-         short s;
-         int i;
-         long l;
-         long long ll;
-         float f;
-         double d;
-         /* long double is currently not used and would increase alignment
-            unnecessarily. */
-         /* long double ld; */
-         void *pto;
-         void (*ptf)(void);
-      } x;
-   };
-
-   /* Make sure the compiler does no surprise us */
-   vassert(offsetof(struct align,x) <= REQ_ALIGN);
-
-#if 0
-  /* Nasty debugging hack, do not use. */
-  return malloc(nbytes);
-#else
-   HChar* curr;
-   HChar* next;
-   SizeT  ALIGN;
-   ALIGN  = offsetof(struct align,x) - 1;
-   nbytes = (nbytes + ALIGN) & ~ALIGN;
-   curr   = private_LibVEX_alloc_curr;
-   next   = curr + nbytes;
-   if (next >= private_LibVEX_alloc_last)
-      private_LibVEX_alloc_OOM();
-   private_LibVEX_alloc_curr = next;
-   return curr;
-#endif
-}
+void* LibVEX_Alloc_inline ( SizeT );
 
 /* Misaligned memory access support. */
 
diff --git a/VEX/pub/libvex.h b/VEX/pub/libvex.h
index d75919d..8160606 100644
--- a/VEX/pub/libvex.h
+++ b/VEX/pub/libvex.h
@@ -606,6 +606,8 @@ extern void LibVEX_Init (
    const VexControl* vcon
 );
 
+/* Update the global VexControl */
+extern void LibVEX_Update_Control (const VexControl * );
 
 /*-------------------------------------------------------*/
 /*--- Make a translation                              ---*/
diff --git a/VEX/pub/libvex_ir.h b/VEX/pub/libvex_ir.h
index fcac043..37cb9da 100644
--- a/VEX/pub/libvex_ir.h
+++ b/VEX/pub/libvex_ir.h
@@ -3046,6 +3046,12 @@ extern IRSB* emptyIRSB ( void );
 /* Deep-copy an IRSB */
 extern IRSB* deepCopyIRSB ( const IRSB* );
 
+/* Deep-copy an IRSB onto the heap */
+extern IRSB* deepCopyIRSB_Heap ( const IRSB* );
+
+typedef void (*AllocationListener)( void*, void* );
+extern void LibVEX_registerAllocationListener ( void*, AllocationListener );
+
 /* Deep-copy an IRSB, except for the statements list, which set to be
    a new, empty, list of statements. */
 extern IRSB* deepCopyIRSBExceptStmts ( const IRSB* );
